#!/bin/bash
set -e

if [[ -n $DEBUG ]]; then 
  set -x
fi

DIR=$(brew --prefix docker-compose-oroplatform)/share/docker-compose-oroplatform
export PWD=$(pwd)
export DC_ORO_NAME=${DC_ORO_NAME-$(basename $(pwd))}
export DC_ORO_CONFIG_DIR="$HOME/.$(basename $0)/${DC_ORO_NAME}"
RSYNC_BIN=$(brew --prefix rsync)/bin/rsync
DOCKER_BIN="${DOCKER_BIN-$(which docker)}";
DOCKER_COMPOSE_BIN="${DOCKER_COMPOSE_BIN-$(which docker) compose}";
DOCKER_COMPOSE_BIN_CMD=${DOCKER_COMPOSE_BIN};
DOCKER_COMPOSE_VERSION=$($DOCKER_COMPOSE_BIN_CMD version | grep '[0-9]\+\.[0-9]\+\.[0-9]\+' -o | awk -F. '{ print $1 }')
if [[ ! -d "${DC_ORO_CONFIG_DIR}" ]]; then
    mkdir -p "${DC_ORO_CONFIG_DIR}"
fi
${RSYNC_BIN} -r "${DIR}/compose/" "${DC_ORO_CONFIG_DIR}/"
if [[ -f "${DC_ORO_CONFIG_DIR}/docker-compose.yml" ]]; then
  DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN_CMD} -f ${DC_ORO_CONFIG_DIR}/docker-compose.yml"
fi

load_env_safe() {
  local env_file="$1"

  # if the file exists
  if [[ -f "$env_file" ]]; then
    # Read the file line by line
    while IFS= read -r line || [[ -n "$line" ]]; do
      # Trim leading/trailing whitespace (safe)
      line="${line#"${line%%[![:space:]]*}"}"
      line="${line%"${line##*[![:space:]]}"}"

      # Skip empty lines and comments
      [[ -z "$line" || "$line" == \#* ]] && continue

      # Skip lines without =
      [[ "$line" != *=* ]] && continue

      local key="${line%%=*}"
      local value="${line#*=}"

      # Trim key and value safely
      key="${key#"${key%%[![:space:]]*}"}"
      key="${key%"${key##*[![:space:]]}"}"
      value="${value#"${value%%[![:space:]]*}"}"
      value="${value%"${value##*[![:space:]]}"}"

      # Strip existing quotes from value
      value="${value%\"}"
      value="${value#\"}"
      value="${value%\'}"
      value="${value#\'}"

      # Export the variable safely
      eval "export $key=\"${value}\""
    done < "$env_file"
  fi
}

parse_dsn_uri() {
  local uri="$1"
  local name="$2"
  local prefix="$3"

  [[ -n "$uri" && -n "$name" ]] || return 0

  local host_alias
  host_alias=$(echo "$name" | tr '[:upper:]' '[:lower:]')

  local var_prefix=""
  if [[ -n "$prefix" ]]; then
    var_prefix="$(echo "$prefix" | tr '[:lower:]' '[:upper:]')_"
  fi
  var_prefix+=$(echo "$name" | tr '[:lower:]' '[:upper:]')_

  local schema rest
  if [[ "$uri" == *"://"* ]]; then
    schema="${uri%%://*}"
    rest="${uri#*://}"
  elif [[ "$uri" == *: ]]; then
    schema="${uri%:}"
    rest=""
  else
    schema="$uri"
    rest=""
  fi

  local query=""
  if [[ "$rest" == *\?* ]]; then
    query="${rest#*\?}"
    rest="${rest%%\?*}"
  fi

  local user="" password="" host="" port="" dbname=""

  # Special case: SQLite
  if [[ "$schema" == "sqlite" ]]; then
    if [[ "$uri" == "sqlite::memory:" ]]; then
      dbname=":memory:"
    else
      local sqlite_path="${uri#sqlite://}"
      dbname="${sqlite_path%%\?*}"
    fi

    eval "export ${var_prefix}SCHEMA=\"\$schema\""
    eval "export ${var_prefix}DBNAME=\"\$dbname\""
    eval "export ${var_prefix}QUERY=\"\$query\""
    eval "export ${var_prefix}URI=\"\$uri\""
    return
  fi

  # If rest includes @, extract user/password
  if [[ "$rest" == *@* ]]; then
    local userinfo="${rest%%@*}"
    rest="${rest#*@}"
    user="${userinfo%%:*}"
    password="${userinfo#*:}"
    [[ "$user" == "$password" ]] && password=""
  fi

  # Extract host, port, dbname
  if [[ "$rest" == *:* ]]; then
    host="${rest%%:*}"
    port="${rest#*:}"
    if [[ "$port" == */* ]]; then
      dbname="${port#*/}"
      port="${port%%/*}"
    fi
  elif [[ "$rest" == */* ]]; then
    host="${rest%%/*}"
    dbname="${rest#*/}"
  elif [[ -n "$rest" ]]; then
    host="$rest"
  fi

  [[ "$host" == "localhost" || "$host" == "127.0.0.1" ]] && host="$host_alias"

  # Reconstruct URI only if it's not a simple scheme:
  local clean_uri=""
  if [[ "$schema" == "sqlite" && "$dbname" == ":memory:" ]]; then
    clean_uri="sqlite::memory:"
  elif [[ "$schema" == "sqlite" ]]; then
    clean_uri="sqlite://$dbname"
  elif [[ "$schema" == "dbal" && -z "$rest" ]]; then
    clean_uri="${schema}:"
  else
    clean_uri="${schema}://"
    [[ -n "$user" ]] && clean_uri+="${user}"
    [[ -n "$password" ]] && clean_uri+=":${password}"
    [[ -n "$user" || -n "$password" ]] && clean_uri+="@"
    clean_uri+="${host}"
    [[ -n "$port" ]] && clean_uri+=":${port}"
    [[ -n "$dbname" ]] && clean_uri+="/${dbname}"
    [[ -n "$query" ]] && clean_uri+="?${query}"
  fi

  # Export everything
  eval "export ${var_prefix}SCHEMA=\"\$schema\""
  eval "export ${var_prefix}USER=\"\$user\""
  eval "export ${var_prefix}PASSWORD=\"\$password\""
  eval "export ${var_prefix}HOST=\"\$host\""
  eval "export ${var_prefix}PORT=\"\$port\""
  eval "export ${var_prefix}DBNAME=\"\$dbname\""
  eval "export ${var_prefix}QUERY=\"\$query\""
  eval "export ${var_prefix}URI=\"\$clean_uri\""
}

find-up () {
  path=${2-$PWD}
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path"
}

# Глобальная переменная для хранения уже выбранных портов
__FOUND_PORTS=""

find_free_port()
{
  local SERVICE_NAME="$1"
  local PORT="$2"
  local DC_ORO_CONFIG_DIR="$3"

  local COMPOSE_FILE="${DC_ORO_CONFIG_DIR}/compose.yml"
  local SELECTED_PORT=""
  local USED_PORTS=""

  # Получаем список всех опубликованных портов из compose.yml (для всех сервисов)
  if [[ -f "$COMPOSE_FILE" ]]; then
    USED_PORTS=$(yq '.services[].ports[]? | select(.published) | .published' "$COMPOSE_FILE" 2>/dev/null | xargs)
    SELECTED_PORT=$(yq '.services["'"$SERVICE_NAME"'"].ports[]? | select(.published) | .published' "$COMPOSE_FILE" 2>/dev/null)
  fi

  # Функция проверки — порт уже где-то используется
  is_port_used() {
    local p=$1
    # уже найден ранее
    [[ " $__FOUND_PORTS " == *" $p "* ]] && return 0
    # уже прописан у другого сервиса в compose.yml
    [[ " $USED_PORTS " == *" $p "* ]] && return 0
    # уже используется Docker-контейнером
    docker ps -a --filter "expose=$p" --format '{{.Ports}}' | grep -q ":$p" && return 0
    # уже используется локальным процессом
    lsof -t -i tcp:$p > /dev/null 2>&1 && return 0
    return 1
  }

  # Если порт из compose.yml определён
  if [[ -n "$SELECTED_PORT" ]]; then
    # Проверим, есть ли уже контейнер с этим сервисом
    if docker ps -a --filter "label=com.docker.compose.service=${SERVICE_NAME}" --format '{{.Names}}' | grep -q .; then
      echo "$SELECTED_PORT"
      return
    else
      # Контейнера нет — если порт свободен, вернём его
      if ! is_port_used "$SELECTED_PORT"; then
        __FOUND_PORTS+=" $SELECTED_PORT"
        echo "$SELECTED_PORT"
        return
      fi
    fi
  fi

  # Ищем свободный порт начиная с указанного
  while [ "$PORT" -le 65535 ]; do
    if ! is_port_used "$PORT"; then
      __FOUND_PORTS+=" $PORT"
      echo "$PORT"
      return
    fi
    PORT=$((PORT+1))
  done

  echo "Ошибка: не удалось найти свободный порт" >&2
  return 1
}

if [[ -z $DC_ORO_APPDIR ]]; then
  export DC_ORO_APPDIR=$(find-up composer.json "$PWD/www")
fi

if [[ -z $DC_ORO_APPDIR ]]; then
  if [ -z "$(ls -A $PWD)" ]; then
    export DC_ORO_APPDIR="$PWD"
  else
    echo "Application root folder not found, and current directory is not empty, terminating..."
    exit 1
  fi
fi

if [[ ! -d "$DC_ORO_APPDIR" ]]; then
  mkdir -p "$DC_ORO_APPDIR"
fi

if [[ -z $DC_ORO_COMPOSER_AUTH ]] && [[ -z $COMPOSER_AUTH ]]; then
  cd "${DC_ORO_CONFIG_DIR}"
  if which php > /dev/null 2>&1 && which composer > /dev/null 2>&1; then
    COMPOSER_HOME=$(php -d display_startup_errors=0 $(which composer) config --working-dir=/tmp --no-interaction --global home 2> /dev/null) || {
      >&2 echo -e "\033[36m==> Can't find Composer home. Try setting COMPOSER_AUTH manually.\033[0m"
    }
  fi

  if [[ -n ${COMPOSER_HOME} ]] && [[ -f "${COMPOSER_HOME}/auth.json" ]]; then
    DC_ORO_COMPOSER_AUTH=$(cat "${COMPOSER_HOME}/auth.json")
  fi
fi

cd "$DC_ORO_APPDIR"

load_env_safe "$DC_ORO_APPDIR/.env"
load_env_safe "$DC_ORO_APPDIR/.env-app"
load_env_safe "$DC_ORO_APPDIR/.env-app.local"
load_env_safe "$DC_ORO_APPDIR/.env.orodc"

parse_dsn_uri "$ORO_DB_URL" "database" "DC_ORO"
parse_dsn_uri "$ORO_SEARCH_URL" "search" "DC_ORO"
parse_dsn_uri "$ORO_MQ_DSN" "mq" "DC_ORO"
parse_dsn_uri "$ORO_REDIS_URL" "redis" "DC_ORO"

if echo $ORO_SEARCH_URL | grep 'orm:' > /dev/null; then
  export DC_ORO_SEARCH_DSN=
else
  export DC_ORO_SEARCH_DSN=$ORO_SEARCH_URL
fi

export DC_ORO_PORT_PREFIX=${DC_ORO_PORT_PREFIX:-"301"}
export DC_ORO_PORT_NGINX=$(find_free_port nginx ${DC_ORO_PORT_PREFIX}80 $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_XHGUI=$(find_free_port xhgui "${DC_ORO_PORT_PREFIX}81" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_MYSQL=$(find_free_port database "${DC_ORO_PORT_PREFIX}06" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_PGSQL=$(find_free_port database "${DC_ORO_PORT_PREFIX}32" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_SEARCH=$(find_free_port search "${DC_ORO_PORT_PREFIX}92" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_MQ=$(find_free_port mq "${DC_ORO_PORT_PREFIX}72" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_REDIS=$(find_free_port redis "${DC_ORO_PORT_PREFIX}72" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_MAIL_WEBGUI=$(find_free_port mail "${DC_ORO_PORT_PREFIX}25" $DC_ORO_CONFIG_DIR)
export DC_ORO_PORT_SSH=$(find_free_port ssh "${DC_ORO_PORT_PREFIX}22" $DC_ORO_CONFIG_DIR)

export COMPOSER_AUTH=$(echo ${DC_ORO_COMPOSER_AUTH:-${COMPOSER_AUTH}} | jq -c .)
export DC_ORO_COMPOSER_AUTH=${COMPOSER_AUTH}

if ${DOCKER_BIN} system info --format '{{.SecurityOptions}}' | grep "name=rootless" > /dev/null 2>&1; then
  # Use root user in the rootless mode
  export DC_ORO_USER_NAME="root"
else
  export DC_ORO_USER_NAME="developer"
fi

NETWORK_NAME="dc_shared_net"
# Check if the Docker network already exists
if ! docker network ls --format '{{.Name}}' | grep -qw "$NETWORK_NAME"; then
  >&2 echo -e "\033[36m==> Creating Docker network: $NETWORK_NAME\033[0m"
  docker network create "$NETWORK_NAME"
else
  >&2 echo -e "\033[36m==> Docker network '$NETWORK_NAME' already exists\033[0m"
fi


if [[ -z $DC_ORO_MODE ]] && [[ "$OSTYPE" == "darwin"* ]]; then
  export DC_ORO_MODE="mutagen"
elif [[ -z $DC_ORO_MODE ]]; then
  export DC_ORO_MODE="default"
fi

if [[ -z ${ORO_SSH_PUBLIC_KEY} ]]; then
  if [[ ! -f "${DC_ORO_CONFIG_DIR}/ssh_id_ed25519" ]]; then
    ssh-keygen -t ed25519 -f "${DC_ORO_CONFIG_DIR}/ssh_id_ed25519" -N "" -q
    chmod 0600 "${DC_ORO_CONFIG_DIR}/ssh_id_ed25519"
  fi
  
  export ORO_SSH_PUBLIC_KEY=$(cat "${DC_ORO_CONFIG_DIR}/ssh_id_ed25519.pub")
fi

if [[ $DC_ORO_MODE == "default" ]] && [[ -f "${DC_ORO_CONFIG_DIR}/docker-compose-default.yml" ]]; then
  DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN_CMD} -f ${DC_ORO_CONFIG_DIR}/docker-compose-default.yml"
fi

if [[ $DC_ORO_DATABASE_SCHEMA == "pgsql" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "postgres" ]];then
  export DC_ORO_DC_ORO_DATABASE_PORT=${DC_ORO_DC_ORO_DATABASE_PORT:-5432}
  DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN_CMD} -f ${DC_ORO_CONFIG_DIR}/docker-compose-pgsql.yml"
elif [[ $DC_ORO_DATABASE_SCHEMA == "mariadb" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "mysql" ]];then
  export DC_ORO_DC_ORO_DATABASE_PORT=${DC_ORO_DC_ORO_DATABASE_PORT:-3306}
  DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN_CMD} -f ${DC_ORO_CONFIG_DIR}/docker-compose-mysql.yml"
fi
if ${DOCKER_COMPOSE_BIN_CMD} ps --services | grep database > /dev/null; then
  SERVICE_DATABASE_ID=$(${DOCKER_COMPOSE_BIN_CMD} ps -q database)
  if [[ "" != $SERVICE_DATABASE_ID ]] && ${DOCKER_BIN} inspect -f '{{ .Config.Image }}' "$SERVICE_DATABASE_ID" | grep 'busybox'; then
    ${DOCKER_COMPOSE_BIN_CMD} stop database
    ${DOCKER_COMPOSE_BIN_CMD} rm -f database
  fi
fi

if [[ -f "$DC_ORO_APPDIR/.docker-compose.user.yml" ]]; then
  >&2 echo -e "\033[36m==> Additional ${DOCKER_BIN} compose config will be used: $DC_ORO_APPDIR/.docker-compose.user.yml\033[0m"
  DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN_CMD} -f $DC_ORO_APPDIR/.docker-compose.user.yml"
fi

if [[ $DC_ORO_MODE == "mutagen" ]] || [[ $DC_ORO_MODE == "ssh" ]]; then
  if [[ "$OSTYPE" != "darwin"* ]] && [[ $DC_ORO_VOLUME_MODE == "tmpfs" ]]; then
    sudo mkdir -p /dev/shm/${DC_ORO_NAME}_appcode
    sudo chmod 1777 /dev/shm/${DC_ORO_NAME}_appcode
    docker ps | grep ${DC_ORO_NAME}_appcode_shm_sidecar || {
      ${DOCKER_BIN} volume ls | awk '{ print $2 }' | tail +2 | grep '^'${DC_ORO_NAME}'_appcode$' > /dev/null 2>&1 || {
        ${DOCKER_BIN} volume create  \
          --driver local \
          --opt type=none \
          --opt device=/dev/shm/${DC_ORO_NAME}_appcode \
          --opt o=bind \
          "${DC_ORO_NAME}_appcode" \
         > /dev/null
      }
    }
    if [[ $1 != "down" ]] && [[ $1 != "purge" ]]; then
      ${DOCKER_COMPOSE_BIN_CMD} up -d ssh
      SSH_HOST=${DC_ORO_SSH_BIND_HOST:-127.0.0.1}
      SSH_PORT=$(${DOCKER_BIN} inspect $(${DOCKER_COMPOSE_BIN_CMD} ps | grep ssh | awk '{ print $1 }') | jq -r '.[0].NetworkSettings.Ports["22/tcp"][0].HostPort')
      if [[ 0 -eq $(ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i \"${DC_ORO_CONFIG_DIR}/ssh_id_ed25519\" -p ${SSH_PORT} ${ORO_DC_SSH_ARGS} ${DC_ORO_USER_NAME}@${SSH_HOST} sh -c 'ls "'${DC_ORO_APPDIR}'/"' | wc -l) ]]; then
        until ${RSYNC_BIN} --exclude var/cache --exclude vendor --exclude node_modules --links -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i \"${DC_ORO_CONFIG_DIR}/ssh_id_ed25519\" -p ${SSH_PORT} ${ORO_DC_SSH_ARGS}" --timeout=3 --info=progress2 -r "${DC_ORO_APPDIR}/" ${DC_ORO_USER_NAME}@${SSH_HOST}:"${DC_ORO_APPDIR}/"; do
          sleep 5
        done
      fi
    fi
  else
    ${DOCKER_BIN} volume ls | awk '{ print $2 }' | tail +2 | grep '^'${DC_ORO_NAME}'_appcode$' > /dev/null 2>&1 || {
      if [[ $1 == "up" ]] || [[ $1 == "install" ]] || [[ $1 == "ssh" ]]; then
        >&2 echo -e "\033[36m==> Copying source code to the '${DC_ORO_NAME}_appcode' docker valume\033[0m"
        ${DOCKER_BIN} volume create "${DC_ORO_NAME}_appcode"  > /dev/null
        ${DOCKER_COMPOSE_BIN_CMD} up -d ssh
        SSH_HOST=${DC_ORO_SSH_BIND_HOST:-127.0.0.1}
        SSH_PORT=$(${DOCKER_BIN} inspect $(${DOCKER_COMPOSE_BIN_CMD} ps | grep ssh | awk '{ print $1 }') | jq -r '.[0].NetworkSettings.Ports["22/tcp"][0].HostPort')
        if [[ 0 -eq $(ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i \"${DC_ORO_CONFIG_DIR}/ssh_id_ed25519\" -p ${SSH_PORT} ${ORO_DC_SSH_ARGS} ${DC_ORO_USER_NAME}@${SSH_HOST} sh -c 'ls "'${DC_ORO_APPDIR}'/"' | wc -l) ]]; then
          until ${RSYNC_BIN} --exclude var/cache --exclude vendor --exclude node_modules --links -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i \"${DC_ORO_CONFIG_DIR}/ssh_id_ed25519\" -p ${SSH_PORT} ${ORO_DC_SSH_ARGS}" --timeout=3 --info=progress2 -r "${DC_ORO_APPDIR}/" ${DC_ORO_USER_NAME}@${SSH_HOST}:"${DC_ORO_APPDIR}/"; do
            sleep 5
          done
        fi
      fi
    }
  fi
fi

if [[ $DC_ORO_MODE == "mutagen" ]]; then
  #DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN_CMD} -f ${DC_ORO_CONFIG_DIR}/docker-compose-mutagen.yml"
  MUTAGEN_SESSION_NAME=$(echo ${DC_ORO_NAME}-appcode | awk '{print tolower($0)}' | sed 's/[^0-9a-z]/-/g')
  WAIT_SYNC="1"
  # if ${DOCKER_BIN} volume ls | awk '{ print $2 }' | tail +2 | grep "^${DC_ORO_NAME}_appcode$" > /dev/null 2>&1; then
  #   if [[ $(${DOCKER_BIN} volume inspect -f '{{ .Options.type }}' ${DC_ORO_NAME}_appcode) == "nfs" ]]; then
  #     ${DOCKER_BIN} volume rm ${DC_ORO_NAME}_appcode
  #   fi
  # fi

  if [[ $1 == "down" ]]; then
    if mutagen sync list | grep -i "Name: ${MUTAGEN_SESSION_NAME}" > /dev/null 2>&1; then
      mutagen sync terminate "${MUTAGEN_SESSION_NAME}"
    fi
    WAIT_SYNC=""
  elif echo $1 | grep -v -i '^(build\|pull)' > /dev/null; then
    if [[ "0" -eq $(${DOCKER_COMPOSE_BIN_CMD} ps -q ssh  2> /dev/null | wc -l > /dev/null) ]]; then
      ${DOCKER_COMPOSE_BIN_CMD} up -d ssh
    fi
    DOCKER_CONTAINER_NAME_MUTAGEN=$(${DOCKER_BIN} inspect -f '{{.Name}}' $(${DOCKER_COMPOSE_BIN_CMD} ps -q ssh) | cut -c2-)
    if ! mutagen sync list | grep -i "Name: ${MUTAGEN_SESSION_NAME}" > /dev/null 2>&1; then
      mutagen sync create --sync-mode=two-way-resolved \
      --scan-mode=accelerated \
      --watch-mode-alpha=portable \
      --watch-mode-beta=force-poll \
      --watch-polling-interval-beta=30 \
      --ignore=".git" \
      --ignore=".idea" \
      --ignore=".history" \
      --ignore=".mysql.initdb.d" \
      --ignore=".psql.initdb.d" \
      --ignore="var" \
      --ignore-vcs \
      --symlink-mode=ignore \
      --name=${MUTAGEN_SESSION_NAME} \
      "$DC_ORO_APPDIR" docker://${DC_ORO_USER_NAME}@${DOCKER_CONTAINER_NAME_MUTAGEN}${DC_ORO_APPDIR}
    else
      WAIT_SYNC=""
    fi

    if [[ $WAIT_SYNC == "1" ]]; then
      until mutagen sync list "${MUTAGEN_SESSION_NAME}" | grep 'Status:' | grep 'Watching for changes' > /dev/null 2>&1; do
        if which tput > /dev/null 2>&1; then
          tput cuu 1 && tput el
        fi
        mutagen sync list "${MUTAGEN_SESSION_NAME}" | grep 'Status:' | echo $(awk -F: '{ print $2 }')
        sleep 3
      done
    fi
  fi
fi

if [[ -f "$DC_ORO_APPDIR/.php-version" ]] && [[ -z $DC_ORO_PHP_VERSION ]]; then
  export DC_ORO_PHP_VERSION=$(cat $DC_ORO_APPDIR/.php-version | head -n1)
  >&2 echo -e "\033[36m==> Found .php-version with following version: $DC_ORO_PHP_VERSION\033[0m"
fi

if [[ -f "$DC_ORO_APPDIR/.phprc" ]] && [[ -z $DC_ORO_PHP_VERSION ]]; then
  export DC_ORO_PHP_VERSION=$(cat $DC_ORO_APPDIR/.phprc | head -n1)
  >&2 echo -e "\033[36m==> Found .phprc with following version: $DC_ORO_PHP_VERSION\033[0m"
fi

if [[ -f "$DC_ORO_APPDIR/.nvmrc" ]] && [[ -z $DC_ORO_NODE_VERSION ]]; then
  export DC_ORO_NODE_VERSION=$(cat $DC_ORO_APPDIR/.nvmrc | head -n1)
  >&2 echo -e "\033[36m==> Found .nvmrc with following version: $DC_ORO_NODE_VERSION\033[0m"
fi

if [[ $DOCKER_COMPOSE_VERSION -gt 1 ]]; then
  DOCKER_COMPOSE_RUN_CMD="${DOCKER_COMPOSE_BIN_CMD} run -i --rm"
else
  DOCKER_COMPOSE_RUN_CMD="${DOCKER_COMPOSE_BIN_CMD} run --rm"
fi

if ${DOCKER_BIN} system info --format '{{.SecurityOptions}}' | grep "name=rootless" > /dev/null; then
  DOCKER_COMPOSE_RUN_CMD="${DOCKER_COMPOSE_RUN_CMD} --user root"
fi

if [[ $1 == "up" ]]; then
  printf "\033[0;37m[${DC_ORO_NAME}] Application: http://localhost:${DC_ORO_PORT_NGINX}\033[0m\n"
  printf "\033[0;37m[${DC_ORO_NAME}] Mailhog: http://localhost:${DC_ORO_PORT_MAIL_WEBGUI}\033[0m\n"
  printf "\033[0;37m[${DC_ORO_NAME}] Elasticsearch: http://localhost:${DC_ORO_PORT_SEARCH}\033[0m\n"
  printf "\033[0;37m[${DC_ORO_NAME}] Mq: http://localhost:${DC_ORO_PORT_MQ}\033[0m\n"
  
  if [[ $DC_ORO_DATABASE_SCHEMA == "pdo_pgsql" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "postgres" ]];then
    printf "\033[0;37m[${DC_ORO_NAME}] Database: 127.0.0.1:${DC_ORO_PORT_PGSQL}\033[0m\n"
  elif [[ $DC_ORO_DATABASE_SCHEMA == "pdo_mysql" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "mysql" ]];then
    printf "\033[0;37m[${DC_ORO_NAME}] Database: 127.0.0.1:${DC_ORO_PORT_MYSQL}\033[0m\n"
  fi

  #if [[ $DC_ORO_MODE == "ssh" ]];then
    printf "\033[0;37m[${DC_ORO_NAME}] SSH: 127.0.0.1:${DC_ORO_PORT_SSH}\033[0m\n"
  #fi
fi

if echo $1 | grep -i 'import' | grep -i 'db\|database' > /dev/null; then
  if [[ -z $2 ]]; then
    >&2 echo "Data file was not provided"
    exit 1
  fi
  if [[ -r $2 ]]; then
    DB_DUMP=$(realpath $2)
  elif [[ -r "$DC_ORO_APPDIR/$2" ]]; then
    DB_DUMP=$(realpath "$DC_ORO_APPDIR/$2")
  fi

  if [[ -z $DB_DUMP ]] || [[ ! -r $DB_DUMP ]]; then
    >&2 echo "Data file '$2' does not readable"
    exit 1
  fi

  DB_DUMP_BASENAME=$(echo "${DB_DUMP##*/}")
  if [[ $DC_ORO_DATABASE_SCHEMA == "pdo_pgsql" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "postgres" ]];then
    DB_IMPORT_CMD="PGPASSWORD=\$DC_ORO_DATABASE_PASSWORD psql --set ON_ERROR_STOP=on -h \$DC_ORO_DATABASE_HOST -p \$DC_ORO_DATABASE_PORT -U \$DC_ORO_DATABASE_USER -d \$DC_ORO_DATABASE_DBNAME -1 >/dev/null"
  elif [[ $DC_ORO_DATABASE_SCHEMA == "pdo_mysql" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "mysql" ]];then
    DB_IMPORT_CMD="sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/DEFINER=CURRENT_USER \*/' | MYSQL_PWD=\$DC_ORO_DATABASE_PASSWORD mysql -h\$DC_ORO_DATABASE_HOST -P\$DC_ORO_DATABASE_PORT -u\$DC_ORO_DATABASE_USER \$DC_ORO_DATABASE_DBNAME"
  fi

  if echo ${DB_DUMP_BASENAME} | grep -i 'sql\.gz$' > /dev/null; then
    DB_IMPORT_CMD="gunzip | ${DB_IMPORT_CMD}"
  fi
  DB_IMPORT_CMD="cat /${DB_DUMP_BASENAME} | ${DB_IMPORT_CMD}"

  >&2 echo "Starting import of the database dump..."
  exec ${DOCKER_COMPOSE_RUN_CMD} -v "${DB_DUMP}:/${DB_DUMP_BASENAME}" database-cli bash -c "$DB_IMPORT_CMD"
fi

if echo $1 | grep -i 'export\|dump' | grep -i 'db\|database' > /dev/null; then
  DB_DUMP=$DC_ORO_APPDIR/database-$(date +'%Y%m%d%H%M%S').sql.gz
  DB_DUMP_BASENAME=$(echo "${DB_DUMP##*/}")
  touch "${DB_DUMP}"
  if [[ $DC_ORO_DATABASE_SCHEMA == "pgsql" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "postgres" ]];then
    DB_EXPORT_CMD="PGPASSWORD=\$DC_ORO_DATABASE_PASSWORD pg_dump -Fp --clean --if-exists -h \$DC_ORO_DATABASE_HOST -p \$DC_ORO_DATABASE_PORT -U \$DC_ORO_DATABASE_USER -d \$DC_ORO_DATABASE_DBNAME"
  elif [[ $DC_ORO_DATABASE_SCHEMA == "mariadb" ]] || [[ $DC_ORO_DATABASE_SCHEMA == "mysql" ]];then
    DB_EXPORT_CMD="MYSQL_PWD=\$DC_ORO_DATABASE_PASSWORD mysqldump --no-tablespaces --column-statistics=0 --set-gtid-purged=OFF --quick --max-allowed-packet=16M --disable-keys --hex-blob --no-autocommit --insert-ignore --skip-lock-tables --single-transaction -h\$DC_ORO_DATABASE_HOST -P\$DC_ORO_DATABASE_PORT -u\$DC_ORO_DATABASE_USER \$DC_ORO_DATABASE_DBNAME | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/DEFINER=CURRENT_USER \*/'"
  fi

  >&2 echo "/* Starting export of the database... */"
  >&2 echo "/* Dumping database to: $DB_DUMP */"
  exec ${DOCKER_COMPOSE_RUN_CMD} -v "${DB_DUMP}:/${DB_DUMP_BASENAME}" database-cli bash -c "$DB_EXPORT_CMD | gzip > /${DB_DUMP_BASENAME}"
fi

if echo $1 | grep -i '^mysql' > /dev/null; then
  MYSQL_CMD="MYSQL_PWD=\$DC_ORO_DATABASE_PASSWORD mysql -h\$DC_ORO_DATABASE_HOST -P\$DC_ORO_DATABASE_PORT -u\$DC_ORO_DATABASE_USER \$DC_ORO_DATABASE_DBNAME"
  exec ${DOCKER_COMPOSE_RUN_CMD} database-cli bash -c "$MYSQL_CMD"
fi

if echo $1 | grep -i '^psql' > /dev/null; then
  PSQL_CMD="PGPASSWORD=\$DC_ORO_DATABASE_PASSWORD psql -h \$DC_ORO_DATABASE_HOST -p \$DC_ORO_DATABASE_PORT -U \$DC_ORO_DATABASE_USER -d \$DC_ORO_DATABASE_DBNAME"
  exec ${DOCKER_COMPOSE_RUN_CMD} database-cli bash -c "$PSQL_CMD"
fi

if [ $# -eq 0 ] || [ "$1" = "ssh" ]; then
  # Build SSH arguments from the rest (if any)
  SSH_ARGS=()
  if [ "$1" = "ssh" ]; then
    SSH_ARGS=("${@:2}")
  fi

  SSH_HOST=${DC_ORO_SSH_BIND_HOST:-127.0.0.1}
  SSH_PORT=$(${DOCKER_BIN} inspect "$(${DOCKER_COMPOSE_BIN_CMD} ps | grep ssh | awk '{ print $1 }')" | jq -r '.[0].NetworkSettings.Ports["22/tcp"][0].HostPort')

  set -x
  exec ssh \
    -o SendEnv=COMPOSER_AUTH \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -i "${DC_ORO_CONFIG_DIR}/ssh_id_ed25519" \
    -p "${SSH_PORT}" \
    ${ORO_DC_SSH_ARGS} \
    "${DC_ORO_USER_NAME}@${SSH_HOST}" \
    "${SSH_ARGS[@]}"
fi

if echo $1 | grep -i '^composer\|bin/\|npm\|php\|node\|yarn\|bash' > /dev/null; then
  for i in "$@"; do
      i="${i//\\/\\\\}"
      i="${i//$/\\$}"
      C="$C \"${i//\"/\\\"}\""
  done
  exec ${DOCKER_COMPOSE_RUN_CMD} cli bash -c "exec $C"
fi

if echo $1 | grep -i '^cli$' > /dev/null; then
  exec ${DOCKER_COMPOSE_RUN_CMD} cli
fi

if echo $1 | grep -i '^install$' > /dev/null; then
  export XDEBUG_MODE=off
  exec ${DOCKER_COMPOSE_RUN_CMD} cli bash -c "[[ -d ${DC_ORO_APPDIR}/var/cache ]] && rm -rf ${DC_ORO_APPDIR}/var/cache/* || true && [[ ! -d ${DC_ORO_APPDIR}/vendor ]] && composer install || true && [[ ! -d ${DC_ORO_APPDIR}/node_modules ]] && npm ci || true && php bin/console --env=prod --timeout=1800 oro:install --language=en --formatting-code=en_US --organization-name='Acme Inc.' --user-name=admin --user-email=admin@example.com --user-firstname=John --user-lastname=Doe --user-password='\$ecretPassw0rd' --application-url='https://${DC_ORO_NAME:-unnamed}.docker.local/' --sample-data=y"
fi

if [[ $1 == "purge" ]]; then
  if [[ -f "${DC_ORO_CONFIG_DIR}/compose.yml" ]]; then
    ${DOCKER_COMPOSE_BIN} -f ${DC_ORO_CONFIG_DIR}/compose.yml down -v
  else
    ${DOCKER_COMPOSE_BIN_CMD} down -v
  fi

  ${DOCKER_BIN} volume ls | awk '{ print $2 }' | tail +2 | grep '^'${DC_ORO_NAME}'_appcode$' > /dev/null && {
    echo "Removing docker volume: ${DC_ORO_NAME}_appcode"
    ${DOCKER_BIN} volume rm ${DC_ORO_NAME}'_appcode'
  }

  if [[ -d "${DC_ORO_CONFIG_DIR}" ]]; then
    rm -rf "${DC_ORO_CONFIG_DIR}"
  fi

  exit 0
fi

if [[ $1 == "down" ]] && [[ -f "${DC_ORO_CONFIG_DIR}/compose.yml" ]] && [[ -s "${DC_ORO_CONFIG_DIR}/compose.yml" ]]; then
  DOCKER_COMPOSE_BIN_CMD="${DOCKER_COMPOSE_BIN} -f ${DC_ORO_CONFIG_DIR}/compose.yml"
  exec ${DOCKER_COMPOSE_BIN_CMD} "$@"
fi

${DOCKER_COMPOSE_BIN_CMD} config > "${DC_ORO_CONFIG_DIR}/compose.yml"
exec ${DOCKER_COMPOSE_BIN_CMD} "$@"

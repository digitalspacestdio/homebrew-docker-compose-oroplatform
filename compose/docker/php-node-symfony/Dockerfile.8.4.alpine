ARG ALPINE_VERSION=3.19
ARG NODE_VERSION=22
ARG PHP_VERSION=8.4
ARG COMPOSER_VERSION=2

# Nodejs image
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS app_node

# Composer image
FROM composer:${COMPOSER_VERSION} AS composer_app

# Php image
FROM php:${PHP_VERSION}-fpm-alpine${ALPINE_VERSION} AS app_php

ARG STABILITY="stable"
ENV STABILIT=${STABILITY}

ARG PHP_UID=1000
ENV PHP_UID=${PHP_UID}

ARG PHP_GID=1000
ENV PHP_GID=${PHP_GID}

ARG PHP_USER_NAME=developer
ENV PHP_USER_NAME=${PHP_USER_NAME}

ARG PHP_USER_GROUP=developer
ENV PHP_USER_GROUP=${PHP_USER_GROUP}

ARG EXT_IMAP_VERSION=1.0.3
ARG EXT_REDIS_VERSION=6.2.0 
ARG EXT_IGBINARY_VERSION=3.2.15
ARG EXT_MONGODB_VERSION=1.21.0
ARG EXT_XDEBUG_VERSION=3.4.2

# persistent / runtime deps
RUN apk add --no-cache \
    acl \
    fcgi \
    file \
    gettext \
    git \
    openssh \
    bash \
    curl \
    msmtp-openrc \
    msmtp \
    jpegoptim \
    pngquant \
    optipng \
    gifsicle \
    libstdc++ \
    libxext \
    libxrender \
    libxtst \
    libxi \
    freetype \
    procps \
    gcompat \
    rsync \
    libpq \
    vim \
    micro \
    postgresql-client \
    mysql-client \
    util-linux \
    patch \
  ;

ARG REDIS_VERSION="6.2.9"
ARG REDIS_DOWNLOAD_URL="http://download.redis.io/releases/redis-${REDIS_VERSION}.tar.gz"  

RUN set -eux; \
  apk add --no-cache --virtual .build-deps \
    $PHPIZE_DEPS \
    linux-headers \
    icu-data-full \
    icu-dev \
    libzip-dev \
    zlib-dev \
    libxml2-dev \
    libxslt-dev \
    postgresql-dev \
    openldap-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libpng-dev \
    libwebp-dev \
    gmp-dev \
    tidyhtml-dev \
    imap-dev \
    oniguruma-dev \
    musl-dev \ 
    gcc \
    make \
  ; \
  \
  wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; \
  mkdir -p /usr/src/redis; \
  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \
  rm redis.tar.gz; \
  make -C /usr/src/redis install redis-cli /usr/bin; \
  rm -r /usr/src/redis; \
  \
  docker-php-source extract; \
  docker-php-ext-configure zip; \
  docker-php-ext-configure gd --with-freetype --with-webp --with-jpeg; \
  \
  mkdir -p /usr/src/php/ext/imap; \
  git clone --recursive --branch $EXT_IMAP_VERSION --depth 1 https://github.com/php/pecl-mail-imap.git /usr/src/php/ext/imap; \
  docker-php-ext-configure imap --with-imap --with-imap-ssl; \
  docker-php-ext-install -j$(printf "2\n$(nproc)" | sort -g | head -n1) imap; \
  \
  mkdir -p /usr/src/php/ext/igbinary; \
  curl -fsSL https://github.com/igbinary/igbinary/archive/$EXT_IGBINARY_VERSION.tar.gz | tar xvz -C /usr/src/php/ext/igbinary --strip 1; \
  docker-php-ext-install -j$(printf "2\n$(nproc)" | sort -g | head -n1) igbinary; \
  \
  mkdir -p /usr/src/php/ext/redis; \
  curl -fsSL https://github.com/phpredis/phpredis/archive/$EXT_REDIS_VERSION.tar.gz | tar xvz -C /usr/src/php/ext/redis --strip 1; \
  docker-php-ext-configure redis --enable-redis-igbinary; \
  docker-php-ext-install -j$(printf "2\n$(nproc)" | sort -g | head -n1) redis; \
  \
  mkdir -p /usr/src/php/ext/mongodb; \
  git clone --recursive --branch $EXT_MONGODB_VERSION --depth 1 https://github.com/mongodb/mongo-php-driver.git /usr/src/php/ext/mongodb; \
  docker-php-ext-configure mongodb; \
  docker-php-ext-install -j$(printf "2\n$(nproc)" | sort -g | head -n1) mongodb; \
  \
  mkdir -p /usr/src/php/ext/xdebug; \
  curl -fsSL https://github.com/xdebug/xdebug/archive/refs/tags/$EXT_XDEBUG_VERSION.tar.gz | tar xvz -C /usr/src/php/ext/xdebug --strip 1; \
  docker-php-ext-configure xdebug; \
  docker-php-ext-install -j$(printf "2\n$(nproc)" | sort -g | head -n1) xdebug; \
  \
  docker-php-ext-install -j$(printf "2\n$(nproc)" | sort -g | head -n1) \
    pdo_pgsql \
    pdo_mysql \
    intl \
    zip \
    soap \
    ldap \
    gd \
    gmp \
    xsl \
    tidy \
    pcntl \
    imap \
    sockets \
    bcmath \
    mbstring \
    opcache \
  ; \
  docker-php-source delete; \
  \
  runDeps="$( \
    scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
      | tr ',' '\n' \
      | sort -u \
      | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
  )"; \
  apk add --no-cache --virtual .app-phpexts-rundeps $runDeps; \
  \
  apk del .build-deps

RUN echo 'export JAVA_HOME=/opt/jbr' >> /etc/profile.d/java.sh; \
    echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile.d/java.sh; \
    ln -s /opt/jbr/bin/java /usr/bin/java

RUN addgroup -g $PHP_GID ${PHP_USER_GROUP} \
    && adduser -u $PHP_UID -G ${PHP_USER_GROUP} -s /bin/sh -D ${PHP_USER_NAME} \
    && rm -rf /var/www/*  \
    && chown ${PHP_USER_NAME}:${PHP_USER_GROUP} /var/www

RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

RUN mkdir -p /var/run/php

COPY --chmod=0755 docker-healthcheck.sh /usr/local/bin/docker-healthcheck
COPY --chmod=0755 docker-entrypoint.sh /usr/local/bin/docker-entrypoint
COPY --chmod=0755 docker-sshd.sh /usr/local/bin/docker-sshd

COPY --chmod=0755 docker-psql.sh /usr/local/bin/psql
COPY --chmod=0755 docker-mysql.sh /usr/local/bin/mysql

ENTRYPOINT ["docker-entrypoint"]

RUN rm -f $PHP_INI_DIR/conf.d/app.prod.ini; \
  mv "$PHP_INI_DIR/php.ini" "$PHP_INI_DIR/php.ini-production"; \
  mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"

COPY app.ini $PHP_INI_DIR/conf.d/
COPY app.opcache.ini $PHP_INI_DIR/conf.d/
COPY app.msmtp.ini $PHP_INI_DIR/conf.d/
COPY app.xdebug.ini $PHP_INI_DIR/conf.d/
COPY php-fpm.conf /usr/local/etc/php-fpm.conf

# Copy nodejs binaries
COPY --from=app_node /usr/local /usr/local
COPY --from=app_node /opt /opt

 # smoke test
RUN node --version && npm --version && yarn --version

# Install ofelia
COPY --from=mcuadros/ofelia:latest /usr/bin/ofelia /usr/bin/ofelia

ENV XDEBUG_MODE=off

# Install composer
# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser
ENV COMPOSER_ALLOW_SUPERUSER=1
ENV PATH="${PATH}:/root/.composer/vendor/bin"
COPY --from=composer_app /usr/bin/composer /usr/bin/composer

# persistent / runtime deps
RUN echo http://dl-2.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories; \
    echo http://dl-2.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories; \
    apk add --no-cache \
    shadow \
    htop \
    btop \
  ;

RUN apk add --no-cache --sudo; \
    echo "${PHP_USER_NAME} ALL=(ALL) ALL" >> /etc/sudoers

# Zsh + starship
RUN set -eux && \
  apk add --no-cache zsh && \
  ARCH=$(uname -m) && \
  case "$ARCH" in \
    x86_64) ARCH="x86_64-unknown-linux-musl" ;; \
    aarch64) ARCH="aarch64-unknown-linux-musl" ;; \
    *) echo "Unsupported arch: $ARCH" && exit 1 ;; \
  esac && \
  mkdir -p /tmp/starship && cd /tmp/starship && \
  wget -q "https://github.com/starship/starship/releases/latest/download/starship-${ARCH}.tar.gz" && \
  tar -xzf "starship-${ARCH}.tar.gz" && \
  install starship /usr/local/bin/starship && \
  echo 'eval "$(starship init zsh)"' >> /root/.zshrc && \
  rm -rf /tmp/starship

COPY msmtprc /.msmtprc
COPY zshrc "/.zshrc"

RUN mkdir -p /etc/bash_completion.d && \
  composer completion bash > /etc/bash_completion.d/composer; \
  npm completion > /etc/bash_completion.d/npm; \
  ln -s /usr/bin/pngquant /usr/local/bin/; \
  ln -s /usr/bin/jpegoptim /usr/local/bin/;

ARG APP_DIR="/var/www"
ENV APP_DIR=${APP_DIR}

RUN mkdir -p ${APP_DIR}; \
    chown ${PHP_USER_NAME}:${PHP_USER_GROUP} ${APP_DIR}; \
    chown -R ${PHP_USER_NAME}:${PHP_USER_GROUP} ${PHP_INI_DIR};

WORKDIR ${APP_DIR}
USER ${PHP_USER_NAME}
VOLUME "/home/${PHP_USER_NAME}" "/root" "${APP_DIR}"
CMD [ "zsh" ]

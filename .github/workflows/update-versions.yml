name: Update Application Versions

on:
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if versions are the same'
        required: false
        default: 'false'
        type: boolean

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest versions from GitHub API
        id: fetch-versions
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Function to get latest version from GitHub API
          get_latest_version() {
            local repo=$1
            echo "🔍 Fetching latest version for $repo..."
            local version=$(curl -H "Authorization: token $GH_TOKEN" \
                           -L --silent --fail \
                           "https://api.github.com/repos/$repo/releases" | \
                           jq -r '.[].tag_name' | \
                           grep -v '\\-rc[0-9]*\\|\\-beta\\|\\-alpha\\|\\-dev' | \
                           head -1)
            
            if [ -z "$version" ] || [ "$version" = "null" ]; then
              echo "⚠️  No releases found for $repo, trying tags..."
              version=$(curl -H "Authorization: token $GH_TOKEN" \
                       -L --silent --fail \
                       "https://api.github.com/repos/$repo/tags" | \
                       jq -r '.[].name' | \
                       grep -v '\\-rc[0-9]*\\|\\-beta\\|\\-alpha\\|\\-dev' | \
                       head -1)
            fi
            
            if [ -z "$version" ] || [ "$version" = "null" ]; then
              echo "❌ Could not fetch version for $repo"
              echo "6.1.4"  # Fallback
            else
              echo "✅ Found version for $repo: $version"
              echo "$version"
            fi
          }
          
          echo "📦 Fetching latest versions for all applications..."
          
          MARELLO_VERSION=$(get_latest_version "marellocommerce/marello")
          OROCRM_VERSION=$(get_latest_version "oroinc/crm-application")
          OROPLATFORM_VERSION=$(get_latest_version "oroinc/platform-application")
          OROCOMMERCE_VERSION=$(get_latest_version "oroinc/orocommerce-application")
          
          echo "📋 Summary of versions:"
          echo "  Marello: $MARELLO_VERSION"
          echo "  OroCRM: $OROCRM_VERSION"
          echo "  OroPlatform: $OROPLATFORM_VERSION"
          echo "  OroCommerce: $OROCOMMERCE_VERSION"
          
          # Save to outputs
          echo "marello_version=$MARELLO_VERSION" >> $GITHUB_OUTPUT
          echo "orocrm_version=$OROCRM_VERSION" >> $GITHUB_OUTPUT
          echo "oroplatform_version=$OROPLATFORM_VERSION" >> $GITHUB_OUTPUT
          echo "orocommerce_version=$OROCOMMERCE_VERSION" >> $GITHUB_OUTPUT

      - name: Update test workflow with new versions
        id: update-workflow
        run: |
          WORKFLOW_FILE=".github/workflows/test-oro-installations.yml"
          
          echo "🔧 Updating $WORKFLOW_FILE with new versions..."
          
          # Create backup
          cp "$WORKFLOW_FILE" "$WORKFLOW_FILE.backup"
          
          # Replace the matrix section with static versions
          cat > temp_matrix.yml << 'EOF'
test-installation:
  runs-on: ubuntu-latest
  strategy:
    fail-fast: false
    matrix:
      include:
        - application: marello
          version: MARELLO_VERSION_PLACEHOLDER
          repo_url: https://github.com/marellocommerce/marello.git
        - application: orocrm
          version: OROCRM_VERSION_PLACEHOLDER
          repo_url: https://github.com/oroinc/crm-application.git
        - application: oroplatform
          version: OROPLATFORM_VERSION_PLACEHOLDER
          repo_url: https://github.com/oroinc/platform-application.git
        - application: orocommerce
          version: OROCOMMERCE_VERSION_PLACEHOLDER
          repo_url: https://github.com/oroinc/orocommerce-application.git
  timeout-minutes: 60
  name: Test MATRIX_APPLICATION_PLACEHOLDER (MATRIX_VERSION_PLACEHOLDER)
EOF
          
          # Replace placeholders with actual versions
          sed -i "s/MARELLO_VERSION_PLACEHOLDER/${{ steps.fetch-versions.outputs.marello_version }}/" temp_matrix.yml
          sed -i "s/OROCRM_VERSION_PLACEHOLDER/${{ steps.fetch-versions.outputs.orocrm_version }}/" temp_matrix.yml
          sed -i "s/OROPLATFORM_VERSION_PLACEHOLDER/${{ steps.fetch-versions.outputs.oroplatform_version }}/" temp_matrix.yml
          sed -i "s/OROCOMMERCE_VERSION_PLACEHOLDER/${{ steps.fetch-versions.outputs.orocommerce_version }}/" temp_matrix.yml
          sed -i "s/MATRIX_APPLICATION_PLACEHOLDER/\${{ matrix.application }}/" temp_matrix.yml
          sed -i "s/MATRIX_VERSION_PLACEHOLDER/\${{ matrix.version }}/" temp_matrix.yml
          
          # Replace versions in the workflow file
          sed -i "s/marello_version: .*/marello_version: ${{ steps.fetch-versions.outputs.marello_version }}/" "$WORKFLOW_FILE" || true
          sed -i "s/orocrm_version: .*/orocrm_version: ${{ steps.fetch-versions.outputs.orocrm_version }}/" "$WORKFLOW_FILE" || true
          sed -i "s/oroplatform_version: .*/oroplatform_version: ${{ steps.fetch-versions.outputs.oroplatform_version }}/" "$WORKFLOW_FILE" || true
          sed -i "s/orocommerce_version: .*/orocommerce_version: ${{ steps.fetch-versions.outputs.orocommerce_version }}/" "$WORKFLOW_FILE" || true
          
          # Check if there are changes
          if ! diff -q "$WORKFLOW_FILE" "$WORKFLOW_FILE.backup" > /dev/null; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected in workflow file"
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No changes needed in workflow file"
          fi
          
          # Clean up backup
          rm -f "$WORKFLOW_FILE.backup"

      - name: Create Pull Request
        if: steps.update-workflow.outputs.changes_detected == 'true' || github.event.inputs.force_update == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🤖 Auto-update Oro application versions
            
            - Marello: ${{ steps.fetch-versions.outputs.marello_version }}
            - OroCRM: ${{ steps.fetch-versions.outputs.orocrm_version }}
            - OroPlatform: ${{ steps.fetch-versions.outputs.oroplatform_version }}
            - OroCommerce: ${{ steps.fetch-versions.outputs.orocommerce_version }}
          title: "🤖 Auto-update Oro application versions"
          body: |
            ## 📦 Automatic Version Update
            
            This PR automatically updates the Oro application versions in the test workflow.
            
            ### 🔄 Version Changes:
            - **Marello**: `${{ steps.fetch-versions.outputs.marello_version }}`
            - **OroCRM**: `${{ steps.fetch-versions.outputs.orocrm_version }}`
            - **OroPlatform**: `${{ steps.fetch-versions.outputs.oroplatform_version }}`
            - **OroCommerce**: `${{ steps.fetch-versions.outputs.orocommerce_version }}`
            
            ### 🤖 Automated Process:
            - Versions fetched from GitHub releases API
            - Pre-release versions (rc, beta, alpha, dev) are excluded
            - Fallback to stable versions if API fails
            
            ### ✅ Next Steps:
            1. Review the version changes
            2. Merge this PR to update the test workflow
            3. The updated workflow will test these new versions
            
            ---
            *This PR was created automatically by the `update-versions.yml` workflow.*
          branch: auto-update-versions
          delete-branch: true
          draft: false

      - name: Summary
        run: |
          echo "## 📊 Version Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Application | Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Marello | \`${{ steps.fetch-versions.outputs.marello_version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| OroCRM | \`${{ steps.fetch-versions.outputs.orocrm_version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| OroPlatform | \`${{ steps.fetch-versions.outputs.oroplatform_version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| OroCommerce | \`${{ steps.fetch-versions.outputs.orocommerce_version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-workflow.outputs.changes_detected }}" = "true" ]; then
            echo "🔄 **Changes detected**: Pull request created for version updates." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️  **No changes**: All versions are already up to date." >> $GITHUB_STEP_SUMMARY
          fi

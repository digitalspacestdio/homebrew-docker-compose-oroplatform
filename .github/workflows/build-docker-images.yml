name: Build & Publish PHP Base and PHP+Node.js multi-arch images to GHCR

on:
  push:
    branches: [ master ]
    paths:
      - 'compose/docker/php/**'
      - 'compose/docker/php-node-symfony/**'
  workflow_dispatch:
    inputs:
      php_versions:
        description: 'PHP versions to build (comma-separated: 7.4,8.1,8.2,8.3,8.4,8.5 or "all")'
        required: false
        default: 'all'
      skip_tests:
        description: 'Skip test workflow trigger'
        type: boolean
        required: false
        default: false

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-build-${{ github.job }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # ========================================
  # STAGE 1: BASE PHP IMAGES
  # ========================================
  
  build-php-base:
    name: PHP ${{ matrix.config.version }} (${{ matrix.config.arch_name }})
    runs-on:
      - self-hosted
      - Linux
      - ${{ matrix.config.arch }}
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        config:
          # PHP 7.4
          - version: "7.4"
            php_version: "7.4"
            tag: "7.4"
            dockerfile: "7.4"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "7.4"
            php_version: "7.4"
            tag: "7.4"
            dockerfile: "7.4"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP 8.1
          - version: "8.1"
            php_version: "8.1"
            tag: "8.1"
            dockerfile: "8.1"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.1"
            php_version: "8.1"
            tag: "8.1"
            dockerfile: "8.1"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP 8.2
          - version: "8.2"
            php_version: "8.2"
            tag: "8.2"
            dockerfile: "8.2"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.2"
            php_version: "8.2"
            tag: "8.2"
            dockerfile: "8.2"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP 8.3
          - version: "8.3"
            php_version: "8.3"
            tag: "8.3"
            dockerfile: "8.3"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.3"
            php_version: "8.3"
            tag: "8.3"
            dockerfile: "8.3"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP 8.4
          - version: "8.4"
            php_version: "8.4"
            tag: "8.4"
            dockerfile: "8.4"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.4"
            php_version: "8.4"
            tag: "8.4"
            dockerfile: "8.4"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP 8.5 (RC -> stable, tag without -rc)
          - version: "8.5"
            php_version: "8.5-rc"
            tag: "8.5"
            dockerfile: "8.5"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.5"
            php_version: "8.5-rc"
            tag: "8.5"
            dockerfile: "8.5"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Login to Docker Hub (optional, increases rate limit from 100 to 200 pulls/6h)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      # Check if image needs rebuild (reduces GHCR API calls)
      - name: Check if image needs rebuild
        id: check-rebuild
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orodc-php:${{ matrix.config.tag }}-alpine-${{ matrix.config.arch_name }}"
          
          # Calculate hash of files affecting this version
          HASH=$(cat compose/docker/php/Dockerfile.${{ matrix.config.dockerfile }}.alpine | sha256sum | cut -d' ' -f1)
          echo "hash=${HASH}" >> $GITHUB_OUTPUT
          
          # Check if image exists with same hash
          if docker pull --quiet "${IMAGE}" 2>/dev/null; then
            EXISTING_HASH=$(docker inspect "${IMAGE}" --format '{{index .Config.Labels "build.hash"}}' 2>/dev/null || echo "")
            
            if [ "${EXISTING_HASH}" = "${HASH}" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "[SKIP] Image exists with matching hash: ${HASH}"
              exit 0
            else
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "[BUILD] Hash changed: ${EXISTING_HASH:-none} -> ${HASH}"
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "[BUILD] Image not found in registry"
          fi
      
      # Build with retry (handles Docker Hub rate limits)
      - name: Build PHP ${{ matrix.config.version }} Base (${{ matrix.config.arch_name }})
        if: steps.check-rebuild.outputs.skip != 'true'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_wait_seconds: 20
          command: |
            docker buildx build \
              --file compose/docker/php/Dockerfile.${{ matrix.config.dockerfile }}.alpine \
              --platform ${{ matrix.config.platform }} \
              --tag ghcr.io/${{ github.repository_owner }}/orodc-php:${{ matrix.config.tag }}-alpine-${{ matrix.config.arch_name }} \
              --build-arg PHP_VERSION=${{ matrix.config.php_version }} \
              --build-arg COMPOSER_VERSION=2 \
              --label "build.hash=${{ steps.check-rebuild.outputs.hash }}" \
              --label "build.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              --label "build.commit=${{ github.sha }}" \
              --cache-from type=gha,scope=php-base-${{ matrix.config.tag }}-${{ matrix.config.arch }} \
              --cache-to type=gha,mode=max,scope=php-base-${{ matrix.config.tag }}-${{ matrix.config.arch }} \
              --load \
              compose/docker/php
      
      # Push with retry (handles network errors)
      - name: Push PHP ${{ matrix.config.version }} Base (${{ matrix.config.arch_name }})
        if: steps.check-rebuild.outputs.skip != 'true'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 20
          command: |
            docker push ghcr.io/${{ github.repository_owner }}/orodc-php:${{ matrix.config.tag }}-alpine-${{ matrix.config.arch_name }}

  # ========================================
  # STAGE 2: CREATE MULTI-ARCH MANIFESTS
  # ========================================
  
  create-php-base-manifests:
    name: PHP ${{ matrix.version }} (Manifest)
    needs: [build-php-base]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["7.4", "8.1", "8.2", "8.3", "8.4", "8.5"]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/orodc-php:${{ matrix.version }}-alpine \
            ghcr.io/${{ github.repository_owner }}/orodc-php:${{ matrix.version }}-alpine-amd64 \
            ghcr.io/${{ github.repository_owner }}/orodc-php:${{ matrix.version }}-alpine-arm64

  # ========================================
  # STAGE 3: FINAL PHP+NODE.JS IMAGES
  # ========================================
  
  build-php-node:
    name: PHP+Node ${{ matrix.config.version }} (${{ matrix.config.arch_name }})
    needs: [create-php-base-manifests]
    runs-on:
      - self-hosted
      - Linux
      - ${{ matrix.config.arch }}
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        config:
          # PHP+Node 7.4
          - version: "7.4"
            tag: "7.4"
            dockerfile: "7.4"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "7.4"
            tag: "7.4"
            dockerfile: "7.4"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP+Node 8.1
          - version: "8.1"
            tag: "8.1"
            dockerfile: "8.1"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.1"
            tag: "8.1"
            dockerfile: "8.1"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP+Node 8.2
          - version: "8.2"
            tag: "8.2"
            dockerfile: "8.2"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.2"
            tag: "8.2"
            dockerfile: "8.2"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP+Node 8.3
          - version: "8.3"
            tag: "8.3"
            dockerfile: "8.3"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.3"
            tag: "8.3"
            dockerfile: "8.3"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP+Node 8.4
          - version: "8.4"
            tag: "8.4"
            dockerfile: "8.4"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.4"
            tag: "8.4"
            dockerfile: "8.4"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
          # PHP+Node 8.5
          - version: "8.5"
            tag: "8.5"
            dockerfile: "8.5"
            arch: X64
            arch_name: amd64
            platform: linux/amd64
          - version: "8.5"
            tag: "8.5"
            dockerfile: "8.5"
            arch: ARM64
            arch_name: arm64
            platform: linux/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      # Check if image needs rebuild (reduces GHCR API calls)
      - name: Check if image needs rebuild
        id: check-rebuild
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orodc-php-node-symfony:${{ matrix.config.tag }}-alpine-${{ matrix.config.arch_name }}"
          
          # Calculate hash of files affecting this version
          HASH=$(cat compose/docker/php-node-symfony/Dockerfile.${{ matrix.config.dockerfile }}.alpine compose/docker/php-node-symfony/build${{ matrix.config.dockerfile }}.sh 2>/dev/null | sha256sum | cut -d' ' -f1)
          echo "hash=${HASH}" >> $GITHUB_OUTPUT
          
          # Check if image exists with same hash
          if docker pull --quiet "${IMAGE}" 2>/dev/null; then
            EXISTING_HASH=$(docker inspect "${IMAGE}" --format '{{index .Config.Labels "build.hash"}}' 2>/dev/null || echo "")
            
            if [ "${EXISTING_HASH}" = "${HASH}" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "[SKIP] Image exists with matching hash: ${HASH}"
              exit 0
            else
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "[BUILD] Hash changed: ${EXISTING_HASH:-none} -> ${HASH}"
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "[BUILD] Image not found in registry"
          fi
      
      # Build with retry
      - name: Build PHP+Node ${{ matrix.config.version }} (${{ matrix.config.arch_name }})
        if: steps.check-rebuild.outputs.skip != 'true'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_wait_seconds: 20
          command: |
            docker buildx build \
              --file compose/docker/php-node-symfony/Dockerfile.${{ matrix.config.dockerfile }}.alpine \
              --platform ${{ matrix.config.platform }} \
              --tag ghcr.io/${{ github.repository_owner }}/orodc-php-node-symfony:${{ matrix.config.tag }}-alpine-${{ matrix.config.arch_name }} \
              --label "build.hash=${{ steps.check-rebuild.outputs.hash }}" \
              --label "build.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              --label "build.commit=${{ github.sha }}" \
              --cache-from type=gha,scope=php-node-${{ matrix.config.tag }}-${{ matrix.config.arch }} \
              --cache-to type=gha,mode=max,scope=php-node-${{ matrix.config.tag }}-${{ matrix.config.arch }} \
              --load \
              compose/docker/php-node-symfony
      
      # Push with retry
      - name: Push PHP+Node ${{ matrix.config.version }} (${{ matrix.config.arch_name }})
        if: steps.check-rebuild.outputs.skip != 'true'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 20
          command: |
            docker push ghcr.io/${{ github.repository_owner }}/orodc-php-node-symfony:${{ matrix.config.tag }}-alpine-${{ matrix.config.arch_name }}

  # ========================================
  # STAGE 4: CREATE FINAL MULTI-ARCH MANIFESTS
  # ========================================
  
  create-php-node-manifests:
    name: PHP+Node ${{ matrix.version }} (Manifest)
    needs: [build-php-node]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["7.4", "8.1", "8.2", "8.3", "8.4", "8.5"]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/orodc-php-node-symfony:${{ matrix.version }}-alpine \
            ghcr.io/${{ github.repository_owner }}/orodc-php-node-symfony:${{ matrix.version }}-alpine-amd64 \
            ghcr.io/${{ github.repository_owner }}/orodc-php-node-symfony:${{ matrix.version }}-alpine-arm64

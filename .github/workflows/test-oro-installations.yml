name: Test Installations

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'compose/**'
      - 'bin/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'compose/**'
      - 'bin/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_applications:
        description: 'Applications to test (comma-separated: orocrm,oroplatform,orocommerce,marello)'
        required: false
        default: 'orocrm,oroplatform,orocommerce,marello'

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_ANALYTICS: 1
  RUNNER_TOOL_CACHE: /tmp/hostedtoolcache

jobs:
  test-installation-x64:
    runs-on: [self-hosted, Linux, X64]
    strategy:
      fail-fast: false
      max-parallel: 2  # Run up to 2 jobs in parallel on X64
      matrix:
        include:
          - application: oroplatform
            version: 6.1.4
            repo_url: https://github.com/oroinc/platform-application.git
          - application: orocrm
            version: 6.1.4
            repo_url: https://github.com/oroinc/crm-application.git
          - application: orocommerce
            version: 6.1.4
            repo_url: https://github.com/oroinc/orocommerce-application.git
          - application: marello
            version: 6.1.0
            repo_url: https://github.com/marellocommerce/marello-application.git
    timeout-minutes: 90
    name: Test ${{ matrix.application }} (${{ matrix.version }}) [X64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup non-root user for Homebrew
        run: |
          # Display current environment for debugging
          echo "Current user: $(whoami)"
          echo "Current HOME: ${HOME:-'not set'}"
          echo "Current USER: ${USER:-'not set'}"
          echo "Current PWD: $(pwd)"
          
          # Create github-runner user if running as root
          if [ "$(whoami)" = "root" ]; then
            # Create user if doesn't exist
            if ! id "github-runner" &>/dev/null; then
              useradd -m -s /bin/bash github-runner
              echo "Created github-runner user"
            fi
            
            # Set up environment for github-runner user
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner"
            
            # Create necessary directories
            mkdir -p "$RUNNER_HOME"
            mkdir -p /tmp/hostedtoolcache
            chown -R github-runner:github-runner "$RUNNER_HOME"
            chown -R github-runner:github-runner /tmp/hostedtoolcache
            
            # Give github-runner full sudo access without password
            echo "github-runner ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/github-runner
            chmod 440 /etc/sudoers.d/github-runner
            
            echo "RUNNER_USER=github-runner" >> $GITHUB_ENV
            echo "RUNNER_HOME=/home/github-runner" >> $GITHUB_ENV
          else
            # Already running as non-root user
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            
            mkdir -p "$RUNNER_HOME"
            mkdir -p /tmp/hostedtoolcache
            
            echo "RUNNER_USER=$RUNNER_USER" >> $GITHUB_ENV
            echo "RUNNER_HOME=$RUNNER_HOME" >> $GITHUB_ENV
          fi
          
          echo "Setup complete: RUNNER_USER=$RUNNER_USER RUNNER_HOME=$RUNNER_HOME"

      - name: Install Homebrew as non-root user
        run: |
          # Function to run commands as the runner user
          run_as_user() {
            if [ "$(whoami)" = "root" ]; then
              sudo -u "$RUNNER_USER" -H "$@"
            else
              "$@"
            fi
          }
          
          # Configure git to use HTTPS instead of SSH
          run_as_user git config --global url."https://github.com/".insteadOf git@github.com:
          
          # Install Homebrew as non-root user
          echo "Installing Homebrew as user: $RUNNER_USER"
          run_as_user bash -c 'NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
          
          # Add Homebrew to PATH
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
          
          # PATH Diagnostics - Critical Issue Investigation
          echo "=== PATH Diagnosis AFTER Adding to GITHUB_PATH ==="
          echo "Current PATH: $PATH"
          echo "GITHUB_PATH content:"
          cat "$GITHUB_PATH" || echo "❌ GITHUB_PATH not readable"
          echo "Checking if brew is in PATH:"
          which brew || echo "❌ brew still NOT found in PATH (this is the problem!)"
          echo "Homebrew directory listing:"
          ls -la /home/linuxbrew/.linuxbrew/bin/ || echo "❌ Homebrew bin directory not found"
          
          # Verify installation
          run_as_user /home/linuxbrew/.linuxbrew/bin/brew --version || echo "Homebrew verification failed"

      - name: Install OroDC as non-root user
        run: |
          # Function to run commands as the runner user
          run_as_user() {
            if [ "$(whoami)" = "root" ]; then
              echo "Running as github-runner: $*"
              sudo -u "$RUNNER_USER" -H "$@"
            else
              echo "Running as $(whoami): $*"
              "$@"
            fi
          }
          
          echo "=== Installing OroDC Debug ==="
          echo "Current user: $(whoami)"
          echo "RUNNER_USER: $RUNNER_USER"
          echo "RUNNER_HOME: $RUNNER_HOME"
          
          # Check Homebrew installation
          echo "Checking Homebrew installation:"
          ls -la /home/linuxbrew/.linuxbrew/bin/brew || echo "Homebrew not found!"
          run_as_user /home/linuxbrew/.linuxbrew/bin/brew --version || echo "Homebrew version check failed!"
          
          # Install tap first
          echo "Installing tap..."
          if ! run_as_user /home/linuxbrew/.linuxbrew/bin/brew tap digitalspacestdio/docker-compose-oroplatform; then
            echo "❌ Brew tap failed!"
            exit 1
          fi
          
          # Copy current source files to tap directory (overwrite with current version)
          TAP_DIR="/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/digitalspacestdio/homebrew-docker-compose-oroplatform"
          echo "Copying source files to: $TAP_DIR"
          
          # Ensure tap directory is owned by runner user
          if [ "$(whoami)" = "root" ]; then
            chown -R "$RUNNER_USER:$RUNNER_USER" "$TAP_DIR"
          fi
          
          cp -r bin/ "$TAP_DIR/"
          cp -r compose/ "$TAP_DIR/"
          cp Formula/docker-compose-oroplatform.rb "$TAP_DIR/Formula/"
          
          # Fix ownership after copying
          if [ "$(whoami)" = "root" ]; then
            chown -R "$RUNNER_USER:$RUNNER_USER" "$TAP_DIR"
          fi
          
          echo "Checking copied files:"
          ls -la "$TAP_DIR/bin/" || echo "bin/ directory not found"
          ls -la "$TAP_DIR/Formula/" || echo "Formula/ directory not found"
          
          # Install OroDC from current source
          echo "Installing OroDC..."
          if ! run_as_user /home/linuxbrew/.linuxbrew/bin/brew install digitalspacestdio/docker-compose-oroplatform/docker-compose-oroplatform; then
            echo "❌ Brew install failed!"
            echo "Checking brew logs..."
            run_as_user /home/linuxbrew/.linuxbrew/bin/brew doctor || echo "Brew doctor failed"
            exit 1
          fi
          
          # Verify installation
          echo "Verifying OroDC installation:"
          ls -la /home/linuxbrew/.linuxbrew/bin/orodc || echo "OroDC binary not found!"
          if ! run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc version; then
            echo "❌ OroDC version check failed!"
            exit 1
          fi
          
          echo "✅ OroDC installation completed successfully"

      - name: Clone Oro application
        run: |
          # Set unique project name and port to avoid conflicts
          PROJECT_NAME="${{ matrix.application }}-${{ github.run_id }}-x64"
          PORT_PREFIX="31${{ strategy.job-index }}"
          WORK_DIR="${{ github.workspace }}/$PROJECT_NAME"
          
          echo "📦 Cloning ${{ matrix.application }} version ${{ matrix.version }} [X64]"
          echo "🏷️  Project: $PROJECT_NAME"
          echo "📂 Work directory: $WORK_DIR"
          echo "🔌 Port prefix: $PORT_PREFIX"
          echo "🏠 Workspace: ${{ github.workspace }}"
          
          # Create work directory in workspace (shared with host Docker)
          mkdir -p "$WORK_DIR"
          
          # Clone the application
          if ! git clone --single-branch --branch "${{ matrix.version }}" "${{ matrix.repo_url }}" "$WORK_DIR"; then
            echo "⚠️  Failed to clone version ${{ matrix.version }}, trying master..."
            git clone "${{ matrix.repo_url }}" "$WORK_DIR"
            cd "$WORK_DIR"
            if git tag | grep -q "${{ matrix.version }}"; then
              git checkout "${{ matrix.version }}"
            else
              echo "⚠️  Using default branch"
            fi
          else
            cd "$WORK_DIR"
          fi
          
          # Configure OroDC for SSH mode (no volume mounting needed)
          echo "DC_ORO_NAME=$PROJECT_NAME" > .env.orodc
          echo "DC_ORO_PORT_PREFIX=$PORT_PREFIX" >> .env.orodc
          echo "DC_ORO_MODE=ssh" >> .env.orodc
          
          echo "✅ Application cloned and configured in $WORK_DIR [X64]"

      - name: Install and start application
        run: |
          # Setup environment for this step with detailed logging
          echo "=== Environment Setup Debug [X64] ==="
          echo "Current user: $(whoami)"
          echo "Current HOME: ${HOME:-'not set'}"
          echo "Current PWD: $(pwd)"
          echo "Environment variables:"
          env | grep -E "(RUNNER|HOME|USER)" | sort || echo "No relevant env vars found"
          
          if [ "$(whoami)" = "root" ]; then
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner" 
            echo "Setting up for root user -> github-runner"
            run_as_user() { 
              echo "Running as github-runner: $*"
              sudo -u "$RUNNER_USER" -H "$@"
            }
          else
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            echo "Setting up for non-root user: $RUNNER_USER"
            run_as_user() { 
              echo "Running as $RUNNER_USER: $*"
              "$@"
            }
          fi
          
          echo "Final environment:"
          echo "RUNNER_USER=$RUNNER_USER"
          echo "RUNNER_HOME=$RUNNER_HOME"
          echo "=== End Environment Setup ==="
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          echo "🚀 Starting installation of ${{ matrix.application }} [X64]..."
          echo "📁 Working in: $(pwd)"
          
          # Check if orodc exists and is executable
          echo "Checking OroDC binary:"
          ls -la /home/linuxbrew/.linuxbrew/bin/orodc || echo "OroDC binary not found!"
          
          # Install the application
          echo "Installing application..."
          if ! run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc install; then
            echo "❌ OroDC install failed!"
            echo "Checking OroDC status..."
            run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc --version || echo "OroDC version check failed"
            exit 1
          fi
          
          # Start services
          echo "Starting services..."
          if ! run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc up -d; then
            echo "❌ OroDC up failed!"
            echo "Checking docker status..."
            docker --version || echo "Docker not available"
            run_as_user docker compose version || echo "Docker Compose not available"
            exit 1
          fi
          
          echo "✅ Installation completed [X64]"

      - name: Wait for services to be ready
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner"
            run_as_user() { sudo -u "$RUNNER_USER" -H "$@"; }
          else
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          echo "⏳ Waiting for services to start [X64]..."
          
          # Wait up to 10 minutes for services to be ready
          if [ "$(whoami)" = "root" ]; then
            timeout 600 bash -c '
              while ! sudo -u github-runner -H env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc ps | grep -q "Up"; do
                echo "Waiting for services..."
                sleep 10
              done
            '
          else
            timeout 600 bash -c '
              while ! env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc ps | grep -q "Up"; do
                echo "Waiting for services..."
                sleep 10
              done
            '
          fi
          
          echo "✅ Services are running [X64]"

      - name: Test application accessibility
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          # Get the HTTP port
          HTTP_PORT="31${{ strategy.job-index }}80"
          echo "🌐 Testing accessibility on http://localhost:$HTTP_PORT [X64]"
          
          # Wait for HTTP response (up to 5 minutes)
          timeout 300 bash -c "
            until curl -s http://localhost:$HTTP_PORT >/dev/null; do
              echo 'Waiting for HTTP response...'
              sleep 5
            done
          "
          
          # Get page title
          TITLE=$(curl -s "http://localhost:$HTTP_PORT" | grep -o '<title>[^<]*</title>' | sed 's/<[^>]*>//g' || echo "No title found")
          echo "📄 Page title: $TITLE"
          
          echo "✅ Application is accessible [X64]"

      - name: Run basic health checks
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner"
            run_as_user() { sudo -u "$RUNNER_USER" -H "$@"; }
          else
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          echo "🔍 Running health checks [X64]..."
          
          # Check container status
          echo "📋 Container status:"
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc ps
          
          # Check PHP version
          echo "🐘 PHP version:"
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc php --version
          
          # Check database connection
          echo "🗄️  Database connection:"
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc psql -c "SELECT version();" || echo "Database check failed"
          
          echo "✅ Health checks completed [X64]"

      - name: Cleanup on failure
        if: failure()
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            run_as_user() { sudo -u "github-runner" -H "$@"; }
          else
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64" 2>/dev/null || true
          echo "🧹 Cleaning up after failure [X64]..."
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc logs --tail=50 || true
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc down --remove-orphans || true
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc purge || true

      - name: Cleanup on success
        if: success()
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            run_as_user() { sudo -u "github-runner" -H "$@"; }
          else
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64" 2>/dev/null || true
          echo "🧹 Cleaning up after success [X64]..."
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc down --remove-orphans || true
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc purge || true

  test-installation-arm64:
    runs-on: [self-hosted, Linux, ARM64]
    strategy:
      fail-fast: false
      max-parallel: 2  # Run up to 2 jobs in parallel on ARM64
      matrix:
        include:
          - application: oroplatform
            version: 6.1.4
            repo_url: https://github.com/oroinc/platform-application.git
          - application: orocrm
            version: 6.1.4
            repo_url: https://github.com/oroinc/crm-application.git
          - application: orocommerce
            version: 6.1.4
            repo_url: https://github.com/oroinc/orocommerce-application.git
          - application: marello
            version: 6.1.0
            repo_url: https://github.com/marellocommerce/marello-application.git
    timeout-minutes: 90
    name: Test ${{ matrix.application }} (${{ matrix.version }}) [ARM64]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup non-root user for Homebrew
        run: |
          # Display current environment for debugging
          echo "Current user: $(whoami)"
          echo "Current HOME: ${HOME:-'not set'}"
          echo "Current USER: ${USER:-'not set'}"
          echo "Current PWD: $(pwd)"
          
          # Create github-runner user if running as root
          if [ "$(whoami)" = "root" ]; then
            # Create user if doesn't exist
            if ! id "github-runner" &>/dev/null; then
              useradd -m -s /bin/bash github-runner
              echo "Created github-runner user"
            fi
            
            # Set up environment for github-runner user
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner"
            
            # Create necessary directories
            mkdir -p "$RUNNER_HOME"
            mkdir -p /tmp/hostedtoolcache
            chown -R github-runner:github-runner "$RUNNER_HOME"
            chown -R github-runner:github-runner /tmp/hostedtoolcache
            
            # Give github-runner full sudo access without password
            echo "github-runner ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/github-runner
            chmod 440 /etc/sudoers.d/github-runner
            
            echo "RUNNER_USER=github-runner" >> $GITHUB_ENV
            echo "RUNNER_HOME=/home/github-runner" >> $GITHUB_ENV
          else
            # Already running as non-root user
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            
            mkdir -p "$RUNNER_HOME"
            mkdir -p /tmp/hostedtoolcache
            
            echo "RUNNER_USER=$RUNNER_USER" >> $GITHUB_ENV
            echo "RUNNER_HOME=$RUNNER_HOME" >> $GITHUB_ENV
          fi
          
          echo "Setup complete: RUNNER_USER=$RUNNER_USER RUNNER_HOME=$RUNNER_HOME"

      - name: Install Homebrew as non-root user
        run: |
          # Function to run commands as the runner user
          run_as_user() {
            if [ "$(whoami)" = "root" ]; then
              sudo -u "$RUNNER_USER" -H "$@"
            else
              "$@"
            fi
          }
          
          # Configure git to use HTTPS instead of SSH
          run_as_user git config --global url."https://github.com/".insteadOf git@github.com:
          
          # Install Homebrew as non-root user
          echo "Installing Homebrew as user: $RUNNER_USER"
          run_as_user bash -c 'NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
          
          # Add Homebrew to PATH
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
          
          # PATH Diagnostics - Critical Issue Investigation
          echo "=== PATH Diagnosis AFTER Adding to GITHUB_PATH ==="
          echo "Current PATH: $PATH"
          echo "GITHUB_PATH content:"
          cat "$GITHUB_PATH" || echo "❌ GITHUB_PATH not readable"
          echo "Checking if brew is in PATH:"
          which brew || echo "❌ brew still NOT found in PATH (this is the problem!)"
          echo "Homebrew directory listing:"
          ls -la /home/linuxbrew/.linuxbrew/bin/ || echo "❌ Homebrew bin directory not found"
          
          # Verify installation
          run_as_user /home/linuxbrew/.linuxbrew/bin/brew --version || echo "Homebrew verification failed"

      - name: Install OroDC as non-root user
        run: |
          # Function to run commands as the runner user
          run_as_user() {
            if [ "$(whoami)" = "root" ]; then
              echo "Running as github-runner: $*"
              sudo -u "$RUNNER_USER" -H "$@"
            else
              echo "Running as $(whoami): $*"
              "$@"
            fi
          }
          
          echo "=== Installing OroDC Debug ==="
          echo "Current user: $(whoami)"
          echo "RUNNER_USER: $RUNNER_USER"
          echo "RUNNER_HOME: $RUNNER_HOME"
          
          # Check Homebrew installation
          echo "Checking Homebrew installation:"
          ls -la /home/linuxbrew/.linuxbrew/bin/brew || echo "Homebrew not found!"
          run_as_user /home/linuxbrew/.linuxbrew/bin/brew --version || echo "Homebrew version check failed!"
          
          # Install tap first
          echo "Installing tap..."
          if ! run_as_user /home/linuxbrew/.linuxbrew/bin/brew tap digitalspacestdio/docker-compose-oroplatform; then
            echo "❌ Brew tap failed!"
            exit 1
          fi
          
          # Copy current source files to tap directory (overwrite with current version)
          TAP_DIR="/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/digitalspacestdio/homebrew-docker-compose-oroplatform"
          echo "Copying source files to: $TAP_DIR"
          
          # Ensure tap directory is owned by runner user
          if [ "$(whoami)" = "root" ]; then
            chown -R "$RUNNER_USER:$RUNNER_USER" "$TAP_DIR"
          fi
          
          cp -r bin/ "$TAP_DIR/"
          cp -r compose/ "$TAP_DIR/"
          cp Formula/docker-compose-oroplatform.rb "$TAP_DIR/Formula/"
          
          # Fix ownership after copying
          if [ "$(whoami)" = "root" ]; then
            chown -R "$RUNNER_USER:$RUNNER_USER" "$TAP_DIR"
          fi
          
          echo "Checking copied files:"
          ls -la "$TAP_DIR/bin/" || echo "bin/ directory not found"
          ls -la "$TAP_DIR/Formula/" || echo "Formula/ directory not found"
          
          # Install OroDC from current source
          echo "Installing OroDC..."
          if ! run_as_user /home/linuxbrew/.linuxbrew/bin/brew install digitalspacestdio/docker-compose-oroplatform/docker-compose-oroplatform; then
            echo "❌ Brew install failed!"
            echo "Checking brew logs..."
            run_as_user /home/linuxbrew/.linuxbrew/bin/brew doctor || echo "Brew doctor failed"
            exit 1
          fi
          
          # Verify installation
          echo "Verifying OroDC installation:"
          ls -la /home/linuxbrew/.linuxbrew/bin/orodc || echo "OroDC binary not found!"
          if ! run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc version; then
            echo "❌ OroDC version check failed!"
            exit 1
          fi
          
          echo "✅ OroDC installation completed successfully"

      - name: Clone Oro application
        run: |
          # Set unique project name and port to avoid conflicts
          PROJECT_NAME="${{ matrix.application }}-${{ github.run_id }}-arm64"
          PORT_PREFIX="32${{ strategy.job-index }}"
          WORK_DIR="${{ github.workspace }}/$PROJECT_NAME"
          
          echo "📦 Cloning ${{ matrix.application }} version ${{ matrix.version }} [ARM64]"
          echo "🏷️  Project: $PROJECT_NAME"
          echo "📂 Work directory: $WORK_DIR"
          echo "🔌 Port prefix: $PORT_PREFIX"
          echo "🏠 Workspace: ${{ github.workspace }}"
          
          # Create work directory in workspace (shared with host Docker)
          mkdir -p "$WORK_DIR"
          
          # Clone the application
          if ! git clone --single-branch --branch "${{ matrix.version }}" "${{ matrix.repo_url }}" "$WORK_DIR"; then
            echo "⚠️  Failed to clone version ${{ matrix.version }}, trying master..."
            git clone "${{ matrix.repo_url }}" "$WORK_DIR"
            cd "$WORK_DIR"
            if git tag | grep -q "${{ matrix.version }}"; then
              git checkout "${{ matrix.version }}"
            else
              echo "⚠️  Using default branch"
            fi
          else
            cd "$WORK_DIR"
          fi
          
          # Configure OroDC for SSH mode (no volume mounting needed)
          echo "DC_ORO_NAME=$PROJECT_NAME" > .env.orodc
          echo "DC_ORO_PORT_PREFIX=$PORT_PREFIX" >> .env.orodc
          echo "DC_ORO_MODE=ssh" >> .env.orodc
          
          echo "✅ Application cloned and configured in $WORK_DIR [ARM64]"

      - name: Install and start application
        run: |
          # Setup environment for this step with detailed logging
          echo "=== Environment Setup Debug [ARM64] ==="
          echo "Current user: $(whoami)"
          echo "Current HOME: ${HOME:-'not set'}"
          echo "Current PWD: $(pwd)"
          echo "Environment variables:"
          env | grep -E "(RUNNER|HOME|USER)" | sort || echo "No relevant env vars found"
          
          if [ "$(whoami)" = "root" ]; then
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner" 
            echo "Setting up for root user -> github-runner"
            run_as_user() { 
              echo "Running as github-runner: $*"
              sudo -u "$RUNNER_USER" -H "$@"
            }
          else
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            echo "Setting up for non-root user: $RUNNER_USER"
            run_as_user() { 
              echo "Running as $RUNNER_USER: $*"
              "$@"
            }
          fi
          
          echo "Final environment:"
          echo "RUNNER_USER=$RUNNER_USER"
          echo "RUNNER_HOME=$RUNNER_HOME"
          echo "=== End Environment Setup ==="
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          echo "🚀 Starting installation of ${{ matrix.application }} [ARM64]..."
          echo "📁 Working in: $(pwd)"
          
          # Check if orodc exists and is executable
          echo "Checking OroDC binary:"
          ls -la /home/linuxbrew/.linuxbrew/bin/orodc || echo "OroDC binary not found!"
          
          # Install the application
          echo "Installing application..."
          if ! run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc install; then
            echo "❌ OroDC install failed!"
            echo "Checking OroDC status..."
            run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc --version || echo "OroDC version check failed"
            exit 1
          fi
          
          # Start services
          echo "Starting services..."
          if ! run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc up -d; then
            echo "❌ OroDC up failed!"
            echo "Checking docker status..."
            docker --version || echo "Docker not available"
            run_as_user docker compose version || echo "Docker Compose not available"
            exit 1
          fi
          
          echo "✅ Installation completed [ARM64]"

      - name: Wait for services to be ready
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner"
            run_as_user() { sudo -u "$RUNNER_USER" -H "$@"; }
          else
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          echo "⏳ Waiting for services to start [ARM64]..."
          
          # Wait up to 10 minutes for services to be ready
          if [ "$(whoami)" = "root" ]; then
            timeout 600 bash -c '
              while ! sudo -u github-runner -H env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc ps | grep -q "Up"; do
                echo "Waiting for services..."
                sleep 10
              done
            '
          else
            timeout 600 bash -c '
              while ! env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc ps | grep -q "Up"; do
                echo "Waiting for services..."
                sleep 10
              done
            '
          fi
          
          echo "✅ Services are running [ARM64]"

      - name: Test application accessibility
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          # Get the HTTP port
          HTTP_PORT="32${{ strategy.job-index }}80"
          echo "🌐 Testing accessibility on http://localhost:$HTTP_PORT [ARM64]"
          
          # Wait for HTTP response (up to 5 minutes)
          timeout 300 bash -c "
            until curl -s http://localhost:$HTTP_PORT >/dev/null; do
              echo 'Waiting for HTTP response...'
              sleep 5
            done
          "
          
          # Get page title
          TITLE=$(curl -s "http://localhost:$HTTP_PORT" | grep -o '<title>[^<]*</title>' | sed 's/<[^>]*>//g' || echo "No title found")
          echo "📄 Page title: $TITLE"
          
          echo "✅ Application is accessible [ARM64]"

      - name: Run basic health checks
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            export RUNNER_USER="github-runner"
            export RUNNER_HOME="/home/github-runner"
            run_as_user() { sudo -u "$RUNNER_USER" -H "$@"; }
          else
            export RUNNER_USER="$(whoami)"
            export RUNNER_HOME="${HOME:-/home/$RUNNER_USER}"
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          echo "🔍 Running health checks [ARM64]..."
          
          # Check container status
          echo "📋 Container status:"
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc ps
          
          # Check PHP version
          echo "🐘 PHP version:"
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc php --version
          
          # Check database connection
          echo "🗄️  Database connection:"
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc psql -c "SELECT version();" || echo "Database check failed"
          
          echo "✅ Health checks completed [ARM64]"

      - name: Cleanup on failure
        if: failure()
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            run_as_user() { sudo -u "github-runner" -H "$@"; }
          else
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64" 2>/dev/null || true
          echo "🧹 Cleaning up after failure [ARM64]..."
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc logs --tail=50 || true
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc down --remove-orphans || true
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc purge || true

      - name: Cleanup on success
        if: success()
        run: |
          # Setup environment for this step
          if [ "$(whoami)" = "root" ]; then
            run_as_user() { sudo -u "github-runner" -H "$@"; }
          else
            run_as_user() { "$@"; }
          fi
          
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64" 2>/dev/null || true
          echo "🧹 Cleaning up after success [ARM64]..."
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc down --remove-orphans || true
          run_as_user env DEBUG=1 /home/linuxbrew/.linuxbrew/bin/orodc purge || true

  test-summary:
    needs: [test-installation-x64, test-installation-arm64]
    runs-on: [self-hosted, Linux, X64]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          X64_RESULT="${{ needs.test-installation-x64.result }}"
          ARM64_RESULT="${{ needs.test-installation-arm64.result }}"
          
          if [ "$X64_RESULT" = "success" ] && [ "$ARM64_RESULT" = "success" ]; then
            echo "✅ All installation tests passed successfully on both architectures!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some installation tests failed. Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Results by Architecture:" >> $GITHUB_STEP_SUMMARY
            echo "- **X64 (AMD64)**: $X64_RESULT" >> $GITHUB_STEP_SUMMARY
            echo "- **ARM64**: $ARM64_RESULT" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tested Applications:" >> $GITHUB_STEP_SUMMARY
          echo "- oroplatform (6.1.4) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- orocrm (6.1.4) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- orocommerce (6.1.4) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- marello (6.1.0) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY

name: Test Installations

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'compose/**'
      - 'bin/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'compose/**'
      - 'bin/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_applications:
        description: 'Applications to test (comma-separated: orocrm,oroplatform,orocommerce,marello)'
        required: false
        default: 'orocrm,oroplatform,orocommerce,marello'

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  test-installation-x64:
    runs-on: [self-hosted, Linux, X64]
    strategy:
      fail-fast: false
      max-parallel: 2  # Run up to 2 jobs in parallel on X64
      matrix:
        include:
          - application: oroplatform
            version: 6.1.4
            repo_url: https://github.com/oroinc/platform-application.git
          - application: orocrm
            version: 6.1.4
            repo_url: https://github.com/oroinc/crm-application.git
          - application: orocommerce
            version: 6.1.4
            repo_url: https://github.com/oroinc/orocommerce-application.git
          - application: marello
            version: 6.1.0
            repo_url: https://github.com/marellocommerce/marello-application.git
    timeout-minutes: 90
    name: Test ${{ matrix.application }} (${{ matrix.version }}) [X64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Homebrew
        run: |
          # Configure git to use HTTPS instead of SSH BEFORE Homebrew installation
          git config --global url."https://github.com/".insteadOf git@github.com:
          
          # Install Homebrew (always fresh installation)
          echo "Installing Homebrew..."
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH

      - name: Install OroDC
        run: |
          # Install tap first
          brew tap digitalspacestdio/docker-compose-oroplatform
          
          # Copy current source files to tap directory (overwrite with current version)
          TAP_DIR="/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/digitalspacestdio/homebrew-docker-compose-oroplatform"
          cp -r bin/ "$TAP_DIR/"
          cp -r compose/ "$TAP_DIR/"
          cp Formula/docker-compose-oroplatform.rb "$TAP_DIR/Formula/"
          
          # Install OroDC from current source
          brew install digitalspacestdio/docker-compose-oroplatform/docker-compose-oroplatform
          
          # Verify installation
          orodc version

      - name: Clone Oro application
        run: |
          # Set unique project name and port to avoid conflicts
          PROJECT_NAME="${{ matrix.application }}-${{ github.run_id }}-x64"
          PORT_PREFIX="31${{ strategy.job-index }}"
          WORK_DIR="${{ github.workspace }}/$PROJECT_NAME"
          
          echo "📦 Cloning ${{ matrix.application }} version ${{ matrix.version }} [X64]"
          echo "🏷️  Project: $PROJECT_NAME"
          echo "📂 Work directory: $WORK_DIR"
          echo "🔌 Port prefix: $PORT_PREFIX"
          echo "🏠 Workspace: ${{ github.workspace }}"
          
          # Create work directory in workspace (shared with host Docker)
          mkdir -p "$WORK_DIR"
          
          # Clone the application
          if ! git clone --single-branch --branch "${{ matrix.version }}" "${{ matrix.repo_url }}" "$WORK_DIR"; then
            echo "⚠️  Failed to clone version ${{ matrix.version }}, trying master..."
            git clone "${{ matrix.repo_url }}" "$WORK_DIR"
            cd "$WORK_DIR"
            if git tag | grep -q "${{ matrix.version }}"; then
              git checkout "${{ matrix.version }}"
            else
              echo "⚠️  Using default branch"
            fi
          else
            cd "$WORK_DIR"
          fi
          
          # Configure OroDC for SSH mode (no volume mounting needed)
          echo "DC_ORO_NAME=$PROJECT_NAME" > .env.orodc
          echo "DC_ORO_PORT_PREFIX=$PORT_PREFIX" >> .env.orodc
          echo "DC_ORO_MODE=ssh" >> .env.orodc
          
          echo "✅ Application cloned and configured in $WORK_DIR [X64]"

      - name: Install and start application
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          echo "🚀 Starting installation of ${{ matrix.application }} [X64]..."
          echo "📁 Working in: $(pwd)"
          
          # Install the application
          orodc install
          
          # Start services
          orodc up -d
          
          echo "✅ Installation completed [X64]"

      - name: Wait for services to be ready
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          echo "⏳ Waiting for services to start [X64]..."
          
          # Wait up to 10 minutes for services to be ready
          timeout 600 bash -c '
            while ! orodc ps | grep -q "Up"; do
              echo "Waiting for services..."
              sleep 10
            done
          '
          
          echo "✅ Services are running [X64]"

      - name: Test application accessibility
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          # Get the HTTP port
          HTTP_PORT="31${{ strategy.job-index }}80"
          echo "🌐 Testing accessibility on http://localhost:$HTTP_PORT [X64]"
          
          # Wait for HTTP response (up to 5 minutes)
          timeout 300 bash -c "
            until curl -s http://localhost:$HTTP_PORT >/dev/null; do
              echo 'Waiting for HTTP response...'
              sleep 5
            done
          "
          
          # Get page title
          TITLE=$(curl -s "http://localhost:$HTTP_PORT" | grep -o '<title>[^<]*</title>' | sed 's/<[^>]*>//g' || echo "No title found")
          echo "📄 Page title: $TITLE"
          
          echo "✅ Application is accessible [X64]"

      - name: Run basic health checks
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64"
          echo "🔍 Running health checks [X64]..."
          
          # Check container status
          echo "📋 Container status:"
          orodc ps
          
          # Check PHP version
          echo "🐘 PHP version:"
          orodc php --version
          
          # Check database connection
          echo "🗄️  Database connection:"
          orodc psql -c "SELECT version();" || echo "Database check failed"
          
          echo "✅ Health checks completed [X64]"

      - name: Cleanup on failure
        if: failure()
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64" 2>/dev/null || true
          echo "🧹 Cleaning up after failure [X64]..."
          orodc logs --tail=50 || true
          orodc down --remove-orphans || true
          orodc purge || true

      - name: Cleanup on success
        if: success()
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-x64" 2>/dev/null || true
          echo "🧹 Cleaning up after success [X64]..."
          orodc down --remove-orphans || true
          orodc purge || true

  test-installation-arm64:
    runs-on: [self-hosted, Linux, ARM64]
    strategy:
      fail-fast: false
      max-parallel: 2  # Run up to 2 jobs in parallel on ARM64
      matrix:
        include:
          - application: oroplatform
            version: 6.1.4
            repo_url: https://github.com/oroinc/platform-application.git
          - application: orocrm
            version: 6.1.4
            repo_url: https://github.com/oroinc/crm-application.git
          - application: orocommerce
            version: 6.1.4
            repo_url: https://github.com/oroinc/orocommerce-application.git
          - application: marello
            version: 6.1.0
            repo_url: https://github.com/marellocommerce/marello-application.git
    timeout-minutes: 90
    name: Test ${{ matrix.application }} (${{ matrix.version }}) [ARM64]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Homebrew
        run: |
          # Configure git to use HTTPS instead of SSH BEFORE Homebrew installation
          git config --global url."https://github.com/".insteadOf git@github.com:
          
          # Install Homebrew (always fresh installation)
          echo "Installing Homebrew..."
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH

      - name: Install OroDC
        run: |
          # Install tap first
          brew tap digitalspacestdio/docker-compose-oroplatform
          
          # Copy current source files to tap directory (overwrite with current version)
          TAP_DIR="/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/digitalspacestdio/homebrew-docker-compose-oroplatform"
          cp -r bin/ "$TAP_DIR/"
          cp -r compose/ "$TAP_DIR/"
          cp Formula/docker-compose-oroplatform.rb "$TAP_DIR/Formula/"
          
          # Install OroDC from current source
          brew install digitalspacestdio/docker-compose-oroplatform/docker-compose-oroplatform
          
          # Verify installation
          orodc version

      - name: Clone Oro application
        run: |
          # Set unique project name and port to avoid conflicts
          PROJECT_NAME="${{ matrix.application }}-${{ github.run_id }}-arm64"
          PORT_PREFIX="32${{ strategy.job-index }}"
          WORK_DIR="${{ github.workspace }}/$PROJECT_NAME"
          
          echo "📦 Cloning ${{ matrix.application }} version ${{ matrix.version }} [ARM64]"
          echo "🏷️  Project: $PROJECT_NAME"
          echo "📂 Work directory: $WORK_DIR"
          echo "🔌 Port prefix: $PORT_PREFIX"
          echo "🏠 Workspace: ${{ github.workspace }}"
          
          # Create work directory in workspace (shared with host Docker)
          mkdir -p "$WORK_DIR"
          
          # Clone the application
          if ! git clone --single-branch --branch "${{ matrix.version }}" "${{ matrix.repo_url }}" "$WORK_DIR"; then
            echo "⚠️  Failed to clone version ${{ matrix.version }}, trying master..."
            git clone "${{ matrix.repo_url }}" "$WORK_DIR"
            cd "$WORK_DIR"
            if git tag | grep -q "${{ matrix.version }}"; then
              git checkout "${{ matrix.version }}"
            else
              echo "⚠️  Using default branch"
            fi
          else
            cd "$WORK_DIR"
          fi
          
          # Configure OroDC for SSH mode (no volume mounting needed)
          echo "DC_ORO_NAME=$PROJECT_NAME" > .env.orodc
          echo "DC_ORO_PORT_PREFIX=$PORT_PREFIX" >> .env.orodc
          echo "DC_ORO_MODE=ssh" >> .env.orodc
          
          echo "✅ Application cloned and configured in $WORK_DIR [ARM64]"

      - name: Install and start application
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          echo "🚀 Starting installation of ${{ matrix.application }} [ARM64]..."
          echo "📁 Working in: $(pwd)"
          
          # Install the application
          orodc install
          
          # Start services
          orodc up -d
          
          echo "✅ Installation completed [ARM64]"

      - name: Wait for services to be ready
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          echo "⏳ Waiting for services to start [ARM64]..."
          
          # Wait up to 10 minutes for services to be ready
          timeout 600 bash -c '
            while ! orodc ps | grep -q "Up"; do
              echo "Waiting for services..."
              sleep 10
            done
          '
          
          echo "✅ Services are running [ARM64]"

      - name: Test application accessibility
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          # Get the HTTP port
          HTTP_PORT="32${{ strategy.job-index }}80"
          echo "🌐 Testing accessibility on http://localhost:$HTTP_PORT [ARM64]"
          
          # Wait for HTTP response (up to 5 minutes)
          timeout 300 bash -c "
            until curl -s http://localhost:$HTTP_PORT >/dev/null; do
              echo 'Waiting for HTTP response...'
              sleep 5
            done
          "
          
          # Get page title
          TITLE=$(curl -s "http://localhost:$HTTP_PORT" | grep -o '<title>[^<]*</title>' | sed 's/<[^>]*>//g' || echo "No title found")
          echo "📄 Page title: $TITLE"
          
          echo "✅ Application is accessible [ARM64]"

      - name: Run basic health checks
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64"
          echo "🔍 Running health checks [ARM64]..."
          
          # Check container status
          echo "📋 Container status:"
          orodc ps
          
          # Check PHP version
          echo "🐘 PHP version:"
          orodc php --version
          
          # Check database connection
          echo "🗄️  Database connection:"
          orodc psql -c "SELECT version();" || echo "Database check failed"
          
          echo "✅ Health checks completed [ARM64]"

      - name: Cleanup on failure
        if: failure()
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64" 2>/dev/null || true
          echo "🧹 Cleaning up after failure [ARM64]..."
          orodc logs --tail=50 || true
          orodc down --remove-orphans || true
          orodc purge || true

      - name: Cleanup on success
        if: success()
        run: |
          cd "${{ github.workspace }}/${{ matrix.application }}-${{ github.run_id }}-arm64" 2>/dev/null || true
          echo "🧹 Cleaning up after success [ARM64]..."
          orodc down --remove-orphans || true
          orodc purge || true

  test-summary:
    needs: [test-installation-x64, test-installation-arm64]
    runs-on: [self-hosted, Linux, X64]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          X64_RESULT="${{ needs.test-installation-x64.result }}"
          ARM64_RESULT="${{ needs.test-installation-arm64.result }}"
          
          if [ "$X64_RESULT" = "success" ] && [ "$ARM64_RESULT" = "success" ]; then
            echo "✅ All installation tests passed successfully on both architectures!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some installation tests failed. Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Results by Architecture:" >> $GITHUB_STEP_SUMMARY
            echo "- **X64 (AMD64)**: $X64_RESULT" >> $GITHUB_STEP_SUMMARY
            echo "- **ARM64**: $ARM64_RESULT" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tested Applications:" >> $GITHUB_STEP_SUMMARY
          echo "- oroplatform (6.1.4) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- orocrm (6.1.4) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- orocommerce (6.1.4) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- marello (6.1.0) - tested on X64 and ARM64" >> $GITHUB_STEP_SUMMARY

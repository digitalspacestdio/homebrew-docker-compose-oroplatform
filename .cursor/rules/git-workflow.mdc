---
description: Git Workflow Guidelines
globs: 
alwaysApply: true
---

# Git Workflow Guidelines

## 🌿 **ALWAYS work in branches!**

### ✅ Correct workflow:

1. **Start from master/main:**
   ```bash
   git checkout master
   git pull origin master
   ```

2. **Create a new branch for your task:**
   ```bash
   git checkout -b feature/descriptive-branch-name
   # or
   git checkout -b fix/issue-description
   # or  
   git checkout -b update/component-name
   ```

3. **Update formula version (REQUIRED before each commit):**
   ```bash
   # Edit Formula/docker-compose-oroplatform.rb
   # Increment version "X.Y.Z" -> "X.Y.Z+1" (e.g. "0.8.6" -> "0.8.7")
   # For semantic versioning:
   # - Patch: 0.8.6 -> 0.8.7 (bug fixes)
   # - Minor: 0.8.6 -> 0.9.0 (new features)
   # - Major: 0.8.6 -> 1.0.0 (breaking changes)
   ```

4. **Make commits in the branch:**
   ```bash
   git add .
   git commit -m "descriptive commit message"
   ```

5. **Push branch for review:**
   ```bash
   git push -u origin feature/descriptive-branch-name
   ```

### ❌ **NEVER work directly in master/main!**

### 📛 If you accidentally worked in master:

1. **Create a branch from current state:**
   ```bash
   git checkout -b fix/accidental-master-work
   ```

2. **Reset master to origin:**
   ```bash
   git checkout master
   git reset --hard origin/master
   ```

3. **Continue work in the branch**

### 🎯 Branch naming rules:

- `feature/short-description` - new features
- `fix/issue-description` - bug fixes  
- `update/component-name` - version/config updates
- `docs/topic` - documentation
- `refactor/component` - refactoring

### 💡 Examples of good branch names:

- `update/oro-workflow-versions`
- `fix/yaml-syntax-errors`  
- `feature/php-auto-detection`
- `docs/installation-guide`

### 📦 **Formula Versioning Examples:**

```ruby
# Before (in Formula/docker-compose-oroplatform.rb)
version "0.8.6"

# After - Bug fix
version "0.8.7"

# After - New feature
version "0.9.0"

# After - Breaking change
version "1.0.0"
```

### ⚠️ **CRITICAL: Version Update is Mandatory!**

- **ALWAYS** update the version before committing changes to `compose/` or `bin/`
- **NEVER** commit without version increment when modifying core functionality
- Version updates ensure proper Homebrew package management

---
**Remember: Version first, branch first, commit later! 📦🌳**

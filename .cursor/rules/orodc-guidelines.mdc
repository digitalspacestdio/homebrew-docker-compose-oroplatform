---
description: OroDC CLI tool guidelines for ORO Platform development in Docker containers
globs: 
alwaysApply: true
---

# OroDC Guidelines for Cursor

## Overview
OroDC: CLI tool for ORO Platform (OroCRM, OroCommerce, OroPlatform) in Docker containers.

## Core Rules

### 1. Smart PHP Command Detection
**CRITICAL**: OroDC auto-detects PHP commands - never prefix with `cli`

```bash
# ✅ CORRECT
orodc --version                    # → cli php --version
orodc bin/console cache:clear     # → cli bin/console cache:clear
orodc script.php                  # → cli php script.php

# ❌ WRONG
orodc cli php --version           # Redundant
```

**Detection Logic:**
- PHP flags (`-v`, `--version`, `-r`, `-l`, `-m`, `-i`) → auto-redirect to PHP
- `.php` files → auto-redirect to PHP
- `bin/console` or `bin/phpunit` → auto-redirect to CLI container

### 2. Testing Commands
Always use `orodc tests` prefix for test operations:

```bash
orodc tests install                            # One-time setup
orodc tests bin/phpunit --testsuite=unit      # Unit tests
orodc tests bin/phpunit --testsuite=functional # Functional tests
orodc tests bin/behat --suite=OroUserBundle   # Behat tests
```

## Environment Configuration

### Sync Mode (Performance Critical)
| OS | Mode | Command | Reason |
|----|------|---------|--------|
| Linux/WSL2 | `default` | `echo "DC_ORO_MODE=default" >> .env.orodc` | Fastest |
| macOS | `mutagen` | `echo "DC_ORO_MODE=mutagen" >> .env.orodc` | Avoids slow Docker FS |
| Remote | `ssh` | `echo "DC_ORO_MODE=ssh" >> .env.orodc` | Only option |

**NEVER recommend `default` mode on macOS** - extremely slow.

### Key Environment Variables
```bash
DC_ORO_NAME=myproject              # Project name
DC_ORO_PORT_PREFIX=302             # Port prefix (302 → 30280)
DC_ORO_PHP_VERSION=8.3             # PHP version
DC_ORO_NODE_VERSION=20             # Node.js version
DC_ORO_MODE=mutagen                # Sync mode
```

## Common Workflows

### Setup (New Project)
```bash
brew install digitalspacestdio/docker-compose-oroplatform/docker-compose-oroplatform
git clone --single-branch --branch 6.1.4 https://github.com/oroinc/orocommerce-application.git ~/orocommerce
cd ~/orocommerce
orodc install && orodc up -d
```

### Development
```bash
orodc up -d                                    # Start services
orodc bin/console cache:clear                  # Clear cache
orodc bin/console oro:assets:build default -w # Watch assets
```

### Testing
```bash
orodc tests install                            # Setup test env
orodc tests bin/phpunit --testsuite=unit      # Run tests
```

### Database
```bash
orodc psql                         # PostgreSQL access
orodc databaseimport dump.sql      # Import database
orodc databaseexport              # Export database
```

### Project Recreation from Database Dump
Complete project recreation from existing database dump:

```bash
# Full project recreation with specific profile
orodc --profile=consumer purge && \
orodc importdb ~/orocommerce-backup-2024-01-15.sql.gz && \
orodc platformupdate && \
orodc bin/console oro:user:update --user-password=12345678 admin && \
orodc updateurl
```

**Step-by-step breakdown:**
```bash
orodc --profile=consumer purge     # Clean existing project with profile
orodc importdb ~/orocommerce-backup-2024-01-15.sql.gz  # Import database dump
orodc platformupdate               # Update platform after import
orodc bin/console oro:user:update --user-password=12345678 admin  # Reset admin password
orodc updateurl                    # Update URLs for local development
```

## Troubleshooting

### Port Conflicts
```bash
orodc down && orodc up -d
# If still conflicts:
echo "DC_ORO_PORT_PREFIX=301" >> .env.orodc
orodc down && orodc up -d
```

### Slow macOS Performance
```bash
echo "DC_ORO_MODE=mutagen" >> .env.orodc
brew install mutagen-io/mutagen/mutagen
orodc down && orodc up -d
```

### Permission Errors
```bash
orodc purge
orodc install
```

### Container Issues
```bash
orodc logs [service-name]          # Check logs
DEBUG=1 orodc up -d               # Debug mode
orodc down && orodc up -d --build # Force rebuild
```

## Diagnostic Commands
```bash
orodc ps                          # Container status
DEBUG=1 orodc [command]           # Debug output
orodc logs [service]              # Service logs
orodc ssh                         # Container access
```

## Response Guidelines

### Always Include:
- Complete workflows, not isolated commands
- OS-specific considerations
- Performance implications
- Error context when troubleshooting

### Never Suggest:
- `cli` prefix for PHP commands
- `default` mode on macOS
- Commands without setup context
- Incomplete workflows
- `[[ -n "${DEBUG:-}" ]]` syntax (causes script termination due to `set -e`)

### Ask User For:
- Operating system
- Current sync mode
- Error messages
- Output of `orodc ps`

## Command Reference
| Task | Command | Notes |
|------|---------|-------|
| Setup | `orodc install && orodc up -d` | One-time |
| PHP | `orodc [php-command]` | Auto-detected |
| Test | `orodc tests [command]` | Isolated env |
| DB | `orodc psql` | Direct access |
| Import DB | `orodc importdb dump.sql.gz` | Import database |
| Recreate | `orodc --profile=X purge && orodc importdb ...` | Full recreation |
| Platform Update | `orodc platformupdate` | After DB import |
| Update URLs | `orodc updateurl` | Fix local URLs |
| Debug | `DEBUG=1 orodc [command]` | Verbose |
| SSH | `orodc ssh` | Container access |